{
    //////////////////////////////////////////////////////////
    // Online Documentations                                //
    // https://jfcherng-sublime.github.io/ST-AutoSetSyntax/ //
    //////////////////////////////////////////////////////////

    ///////////////////
    // User Settings //
    ///////////////////

    // Enable plugin log (in a dedicated panel)
    "enable_log": true,
    // Set default syntax for new files.
    // Can be one of following formats:
    //   - Syntax top scope: "scope:text.html.markdown"
    //   - Partial/full syntax file path: "Markdown/Markdown."
    //   - The name of the syntax: "Markdown" (which is shown in the bottom-right corner of ST)
    //   - An empty string, which does nothing
    "new_file_syntax": "",
    // Run "auto_set_syntax" command on views which exist before the plugin is loaded?
    "run_on_startup_views": false,
    // The max lookup size for the file.
    // A negative number means no limit, which may have performance issue on large files.
    "trim_file_size": 5000, // about 5KB
    // The max lookup length for the first line.
    // A negative number means no limit, which may have performance issue on a long first line.
    "trim_first_line_length": 180,
    // Syntax rules that will be checked one by one.
    // This plugin will assign the syntax in the first satisfied rule to the view.
    // You may want to see "default_syntax_rules" for some examples.
    "user_syntax_rules": [],
    // Suffixes that will be used to right trim the filename.
    // By doing that, the file may be then auto set syntax with a trimmed filename.
    "user_trim_suffixes": [],

    //////////////////////
    // Project Settings //
    ////////////////////////////////////////////////////////////////////////////
    // You shouldn't change these settings here but in your project settings. //
    ////////////////////////////////////////////////////////////////////////////

    // Syntax rules that will be checked one by one.
    // This plugin will assign the syntax in the first satisfied rule to the view.
    // You may want to see "default_syntax_rules" for some examples.
    "project_syntax_rules": [],
    // Suffixes that will be used to right trim the filename.
    // By doing that, the file may be then auto set syntax with a trimmed filename.
    "project_trim_suffixes": [],

    //////////////////////
    // Default Settings //
    ////////////////////////////////////////////////////////////////////////////
    // If you override default rules, they will not be updated in the future. //
    // If you want to add new rules, add them in user settings.               //
    ////////////////////////////////////////////////////////////////////////////

    // Syntax rules that will be checked one by one.
    // This plugin will assign the syntax in the first satisfied rule to the view.
    "default_syntax_rules": [
        // syntax rule
        {
            "syntaxes": "scope:source.python",
            "selector": "text.plain",
            // match rule
            "match": "all", // "any" by default
            "rules": [
                // constraint rule
                {
                    "constraint": "contains_regex",
                    "args": ["^(?:def|class)\\s"]
                },
                {
                    "constraint": "contains_regex",
                    "args": ["^import(?:$|[\\s(])", "^from\\s+[a-zA-Z.]+\\s+import(?:$|[\\s(])"]
                }
            ]
        },
        {
            "syntaxes": "scope:source.json",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "name_contains_regex",
                    "args": ["^\\.(?:jshint|jscs|csslint|eslint|bower)rc$"]
                }
            ]
        },
        {
            "syntaxes": "scope:source.shell.bash",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "name_contains_regex",
                    "args": ["^profile$", "^.*\\.bash.*$", "^.*\\.z(?:shrc|shenv|profile|login|logout).*$"]
                }
            ]
        },
        {
            // at least, C++ is a super set of C in ST's syntax aspect
            "syntaxes": "scope:source.c++",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "contains_regex",
                    "args": [
                        "(?:^|\\s)#include\\s*[<\"]",
                        "(?:^|\\s)#pragma\\s+(?:once|pack|(?:pop|push)_macro|warning)\\b",
                        "(?:^|\\s)template\\s*<\\s*(?:class|typename)(?=$|\\s)",
                        // some strong characteristics of keywords
                        "\\b(?:const(?:eval|expr|init)|decltype|nullptr|(?:const|dynamic|reinterpret|static)_cast)\\b"
                    ]
                }
            ]
        },
        {
            "syntaxes": "scope:source.cs",
            "selector": "text.plain",
            "match": "all",
            "rules": [
                {
                    "constraint": "contains_regex",
                    "args": ["^using\\s"]
                },
                {
                    "constraint": "contains_regex",
                    "args": ["^namespace\\s"]
                }
            ]
        },
        {
            "syntaxes": "scope:source.diff",
            "selector": "text.plain",
            "rules": [
                // path headers
                {
                    "match": "all",
                    "rules": [
                        {
                            "constraint": "contains_regex",
                            "args": ["^\\+{3} "]
                        },
                        {
                            "constraint": "contains_regex",
                            "args": ["^-{3} "]
                        }
                    ]
                },
                // context line numbers
                {
                    "constraint": "contains_regex",
                    "args": ["^@@ -\\d+,\\d+ \\+\\d+,\\d+ @@"]
                }
            ]
        },
        {
            "syntaxes": "scope:source.go",
            "selector": "text.plain",
            "match": "all",
            "rules": [
                {
                    "constraint": "contains_regex",
                    "args": ["^(?:package)\\s"]
                },
                {
                    "constraint": "contains_regex",
                    "args": ["^(?:import|func|type)\\s"]
                }
            ]
        },
        {
            "syntaxes": "scope:source.js",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "contains_regex",
                    "args": [
                        "\\bconsole\\.(?:assert|debug|error|info|log|trace|warn)\\s*\\(",
                        "(?:^|\\s)export\\s+default\\s"
                    ]
                }
            ]
        },
        {
            // .m files could be Objective-C or Matlab files
            // We first use a rather reliable regex from GitHub
            // https://github.com/github/linguist/blob/master/lib/linguist/heuristics.rb#L69)
            // to apply syntax for Objective-C files
            "syntaxes": "scope:source.objc",
            "selector": "text.plain | source.matlab",
            "match": "all",
            "rules": [
                {
                    "constraint": "is_extension",
                    "args": [".m"]
                },
                {
                    "constraint": "contains_regex",
                    "args": [
                        "^\\s*(?:@(?:interface|class|protocol|property|end|synchronised|selector|implementation)\\b|#import\\s+.+\\.h[\">])"
                    ]
                }
            ]
        },
        {
            // Then use the % regex to detect Matlab files
            "syntaxes": "scope:source.matlab",
            "selector": "text.plain | source.objc",
            "match": "all",
            "rules": [
                {
                    "constraint": "is_extension",
                    "args": [".m"]
                },
                {
                    "constraint": "contains_regex",
                    "args": ["^\\s*%"],
                    "kwargs": { "threshold": 2 }
                }
            ]
        },
        {
            "comment": "\"Ruby on Rails\" project",
            "syntaxes": "scope:source.ruby.rails",
            "selector": "text.plain | source.ruby",
            "rules": [
                {
                    "constraint": "is_rails_file"
                }
            ]
        },
        {
            "syntaxes": "scope:source.ruby",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "is_extension",
                    "args": [".thor", ".rake", ".simplecov", ".jbuilder", ".rb", ".podspec", ".rabl"]
                },
                {
                    "constraint": "path_contains_regex",
                    "args": [
                        "^.*/(?:Berks|Cap|[Cc]hef|Gem|Guard|Pod|[Rr]ake|Thor)file$",
                        "^.*/config.ru$",
                        "^.*/Vagrantfile(?:/..*)?$"
                    ]
                },
                {
                    "constraint": "is_interpreter",
                    "args": ["ruby"]
                }
            ]
        },
        {
            // Meteor templates follow Handlebars syntax, but must end in .html;
            // but they also always begin with `<template name=`
            "syntaxes": "scope:text.html.handlebars",
            "selector": "text.plain | text.html",
            "match": "all",
            "rules": [
                {
                    "constraint": "is_extension",
                    "args": [".html"]
                },
                {
                    "constraint": "first_line_contains_regex",
                    "args": ["^<template name="]
                }
            ]
        },
        {
            "syntaxes": "scope:source.typoscript",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "path_contains_regex",
                    "args": [
                        "^.*/ext_conf_template\\.txt$",
                        "^.*/ext_typoscript_(?:setup|constants)\\.txt$",
                        "^.*/(?:fileadmin|typo3|TypoScript).*/(?:setup|constants)\\.txt$"
                    ]
                }
            ]
        },
        {
            "comment": "Apache config",
            "syntaxes": "scope:source.apacheconf",
            "selector": "text.plain | source.nginx",
            "rules": [
                {
                    "constraint": "path_contains_regex",
                    "args": ["\\b(?i:apache|httpd)\\b.*/conf/.*\\.conf$"]
                },
                {
                    "constraint": "contains_regex",
                    "args": ["<(?:VirtualHost|Directory|Macro)(?:$|\\s)"]
                }
            ]
        },
        {
            "comment": "NGINX config",
            "syntaxes": "scope:source.nginx",
            "selector": "text.plain | source.apacheconf",
            "rules": [
                {
                    "constraint": "path_contains_regex",
                    "args": ["\\b(?i:nginx)\\b.*/conf/.*\\.conf$"]
                },
                {
                    "constraint": "contains_regex",
                    "args": ["^\\s*(?:location\\s+(?:[~=/a-zA-Z])|(?:fastcgi_param|charset_map)\\s)"]
                }
            ]
        },
        {
            "comment": "Package installation/update messages from Package Control",
            "syntaxes": "scope:text.html.markdown",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "first_line_contains_regex",
                    "args": ["^Package Control Messages(?:$|\\s)"]
                }
            ]
        },
        {
            "comment": "AutoSetSyntax Debug Information",
            "syntaxes": "scope:source.python",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "first_line_contains",
                    "args": ["# === AutoSetSyntax Debug Information === #"]
                }
            ]
        }
    ],
    // Suffixes that will be used to right trim the filename.
    // By doing that, the file may be then auto set syntax with a trimmed filename.
    "default_trim_suffixes": [
        "-dev",
        "-development",
        "-dist",
        "-optional",
        "-prod",
        "-production",
        "-test",
        ".backup",
        ".bak",
        ".default",
        ".dev",
        ".dist",
        ".example",
        ".inc",
        ".include",
        ".local",
        ".orig",
        ".sample",
        ".temp",
        ".test",
        ".tmp",
        ".tpl"
    ]
}
