{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[:\uff1a\u3001,\uff0c.\u3002!\uff01?\uff1f()\uff08\uff09/\uff0f]+"},"docs":[{"location":"","text":"Introduction \u00b6 AutoSetSyntax v2 utilizes ST 4 plugin APIs along with Python 3.8. Overview \u00b6 AutoSetSyntax helps you set the syntax for a view automatically in various ways: Default syntax for new files and build outputs. Detecting the syntax when modifying the file. Trimming unimportant suffixes from the filename. Assigning syntax for Sublime Text syntax test files. Assigning syntax by the first line. User-defined rules. (Experimental) Machine learning based syntax detection. If you want to learn more details, read \" Use Cases \" and \" Configurations \". Installation \u00b6 This package is available on Package Control by the name of AutoSetSyntax . Best Practice It's strongly recommended to install LSP and LSP-json to have a better experience for editing settings. At least, it will provide autocompletion and verification for settings of this plugin. Acknowledgment \u00b6 Plugin's original idea comes from \" Automatically set view syntax according to first line \". ApplySyntax , which AutoSetSyntax v2 is inspired by. License \u00b6 Quote MIT License Copyright \u00a9 2017-2022 Jack Cherng jfcherng@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Introduction"},{"location":"#introduction","text":"AutoSetSyntax v2 utilizes ST 4 plugin APIs along with Python 3.8.","title":"Introduction"},{"location":"#overview","text":"AutoSetSyntax helps you set the syntax for a view automatically in various ways: Default syntax for new files and build outputs. Detecting the syntax when modifying the file. Trimming unimportant suffixes from the filename. Assigning syntax for Sublime Text syntax test files. Assigning syntax by the first line. User-defined rules. (Experimental) Machine learning based syntax detection. If you want to learn more details, read \" Use Cases \" and \" Configurations \".","title":"Overview"},{"location":"#installation","text":"This package is available on Package Control by the name of AutoSetSyntax . Best Practice It's strongly recommended to install LSP and LSP-json to have a better experience for editing settings. At least, it will provide autocompletion and verification for settings of this plugin.","title":"Installation"},{"location":"#acknowledgment","text":"Plugin's original idea comes from \" Automatically set view syntax according to first line \". ApplySyntax , which AutoSetSyntax v2 is inspired by.","title":"Acknowledgment"},{"location":"#license","text":"Quote MIT License Copyright \u00a9 2017-2022 Jack Cherng jfcherng@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"changelog/","text":"AutoSetSyntax Changelog \u00b6 2.10.2 \u00b6 feat: detect \"shellcheck directive\" for bash/zsh 2.10.1 \u00b6 refactor: about ViewSnapshot ... 2.10.0 \u00b6 chore: improve .env files rules feat: new constraint: selector_matches feat: new constraint: is_hidden_syntax feat: new constraint: is_syntax 2.9.9 \u00b6 chore: improve .env files for AFileIcon users 2.9.8 \u00b6 feat: add rules for .env files refactor: guesslang server only has one model now 2.9.7 \u00b6 fix: Unknown languageId from guesslang chore: remove useless Ruby rules 2.9.6 \u00b6 fix: guesslang server doesn't response 2.9.5 \u00b6 feat: add match kwarg to relative_exists constraint feat: tidy/add some new rules 2.9.4 \u00b6 feat: new constraint: is_in_python_django_project refactor: replace is_rails_file with is_in_ruby_on_rails_project chore: improve Django template files detection 2.9.3 \u00b6 feat: add Jinja2 rules for HTML files refactor: remove \"Migration\" things 2.9.2 \u00b6 chore: update guesslang server 2.9.1 \u00b6 chore: load plugin synchronously 2.9.0 \u00b6 chore: update guesslang server feat: new constraint: is_line_count refactor: bump min ST version to 4114 2.8.6 \u00b6 No change. Just to tackle with messed up versions. 2.8.5 \u00b6 fix: syntax highlighting for log panel 2.8.4 \u00b6 chore: tidy debug messages fix: empty \"on_events\" doesn't work as expected 2.8.3 \u00b6 chore: change default trim_file_size to 20000 (about 20KB) chore: change default trim_first_line_length to 500 feat: debounce detection when text changes perf: fire on_text_changed_async only when syntax is plain text 2.8.2 \u00b6 chore: update guesslang server chore: add .in into default_trim_suffixes 2.8.1 \u00b6 chore: update guesslang server 2.8.0 \u00b6 fix: guesslang on hidden file without an extension feat: auto set syntax for ST syntax test files This should be useful for those who have no file extension. 2.7.0 \u00b6 feat: add new setting trim_suffixes_auto Apart from trim_suffixes , also try to remove every sub-extensions when finding a syntax match. For example, for the file foo.json.ext1.ext2.ext3 , this setting enables trying the following file names as well. foo.json.ext1.ext2 (no matching syntax) foo.json.ext1 (no matching syntax) foo.json (matches JSON syntax) If there is no JSON syntax, then foo will be tried. 2.6.10 \u00b6 fix: RuntimeError: dictionary changed size during iteration 2.6.9 \u00b6 feat: treat files started with Makefile. as Makefile Such as Makefile.build , Makefile.debug , etc... 2.6.8 \u00b6 chore: update guesslang server 2.6.7 \u00b6 fix: Jenkinsfile is detected as Python fix: detect VIM syntax settings not only at the first line 2.6.6 \u00b6 fix: nested MatchRules without \"match\" doesn't work (#11) refactor: get rid of \"..\" from path 2.6.5 \u00b6 refactor: assume guesslang server starts if port is already in use 2.6.4 \u00b6 chore: update language detection model 2.6.3 \u00b6 refactor: allow manually run AI model on plain text file 2.6.2 \u00b6 fix: auto_set_syntax_create_new_xxx commands not working fix: command name CamelCase refactor: simplify boot.py 2.6.1 \u00b6 fix: internal states for running ClearLogPanel from command palette fix: modules should be reloaded when update plugin refactor: squash log messages if they are duplicate 2.6.0 \u00b6 feat: introduce a new AI model ( vscode-regexp-languagedetection ) which comes from VSCode 1.65.0 It will be used by default for small buffer if guesslang.enabled is true . To use it, you have to run AutoSetSyntax: Download Guesslang Server from the command palette again. 2.5.0 \u00b6 refactor: let guesslang server guess JS vs TS if possible feat: add new constraint: is_guesslang_enabled fix: \"invert\" typo in sublime-package.json 2.4.4 \u00b6 chore: revise menu wording dosc: update missing 2.4.3 changelog refactor: remove leading plugin name from log panel refactor: tidy codes 2.4.3 \u00b6 fix: set is_widget for the log panel 2.4.2 \u00b6 docs: add use case for dim out build status from the build output panel fix: guesslang server connection failed on Linux refactor: bundled syntaxes 2.4.1 \u00b6 refactor: refine scope for ExecOutput.sublime-syntax 2.4.0 \u00b6 feat: set default syntax for build output panel fix: partial path syntax representation not working 2.3.14 \u00b6 fix: plugin is triggered before settings are ready refactor: make checking guesslang server started more clearly refactor: simply command auto_set_syntax_create_new_implementation 2.3.13 \u00b6 fix: correct type annotation for ExpandableVar fix: various constraints give wrong results pref: refactor generate_trimmed_strings() with trie refactor: make event_name into Enum 2.3.12 \u00b6 feat: add as YAML file: .clang-format , .clang-tidy , .clangd 2.3.11 \u00b6 feat: add .shared into trimmed suffixes refactor: simplify codes test: add an PHP as xxx.sh file sample 2.3.10 \u00b6 fix: always prefer shebang over filename chore: improve debug messages chore: update JSON rule as per ApplySytnax's 2.3.9 \u00b6 feat: add case_insensitive for is_extension constraint docs: add hinting for Win7 with Node.js v14 2.3.8 \u00b6 chore: fix outdated sublime-package.json contents feat: add a rule for ST/SM changelog.txt feat: add new constraints is_arch , is_platform and is_platform_arch fix: also try trimmed filename when triggered by a command 2.3.7 \u00b6 feat: add a rule for SQL fix: head_tail_content() wrong tail content chore: add some debug message for guesslang 2.3.6 \u00b6 fix: recheck view syntax again before setting syntax by guesslang 2.3.5 \u00b6 fix: auto restart guesslang server after running install command fix: download guesslang server by chunks refactor: use hardcoded guesslang server download URL chore: also check guesslang server bin existence after downloading 2.3.4 \u00b6 fix: auto_set_syntax_download_guesslang_server command doesn't create folder recursively 2.3.3 \u00b6 fix: auto_set_syntax_download_guesslang_server command failure because files/directories are locked 2.3.2 \u00b6 fix: do some basic checks for the guesslang-predicted syntax The model seems to predict some plain text as INI syntax quite frequently... 2.3.1 \u00b6 fix: do not apply guesslang on files having an extension 2.3.0 \u00b6 feat: predict syntax by a machine learning model This experimental feature is disabled by default. It provides the same feature which is introduced in VSCode 1.60. https://code.visualstudio.com/updates/v1_60#_automatic-language-detection If you want to try it, please check the following link. https://jfcherng-sublime.github.io/ST-AutoSetSyntax/experimental/ml-based-syntax-detection/ chore: reduce default trim_file_size setting from 5000 to 4000 2.2.6 \u00b6 feat: add a rule for Java refactor: allow using view_clear_undo_stack in text commands refactor: use set_read_only to replace command_mode 2.2.5 \u00b6 fix: View.clear_undo_stack can not be run inside TextCommand fix: some panel commands are not shown in command palette fix: scope:output.autosetsyntax.log not found during updating plugin 2.2.4 \u00b6 fix: typo in default settings 2.2.3 \u00b6 chore: prioritize plugin core syntax rules Otherwise, if the user has a bad syntax rule in user settings, that may make debug information always be set with a wrong syntax. 2.2.2 \u00b6 chore: add some comments for sublime-package.json feat: add case_insensitive for is_name constraint feat: add a rule for qt.conf fix: is_size constraint has no AC in settings perf: speedup detecting TypoScript 2.2.1 \u00b6 feat: add a rule for qt.conf 2.2.0 \u00b6 fix: parse_regex_flags() for duplicate flags 2.1.11 \u00b6 fix: apply a syntax via VIM modeline 2.1.10 \u00b6 feat: add a rule for Qt's translation files fix: AttributeError: type object 'View' has no attribute 'clear_undo_stack' 2.1.9 \u00b6 refactor: make trim_suffixes more sorted fix: clear undo stack for the log panel 2.1.8 \u00b6 fix: AutoSetSyntax debug info is not auto set syntax refactor: generate syntax_rules and trim_suffixes more statically 2.1.7 \u00b6 fix: set syntax during typing not working chore: use JSON for js/css source map 2.1.6 \u00b6 fix: auto trimmed filename should only works on plain text 2.1.5 \u00b6 fix: overkill changing .erb files back to HTML syntax 2.1.4 \u00b6 feat: add lua syntax rule feat: improve is_interpreter to match VIM's syntax line 2.1.3 \u00b6 feat: add Diff , JavaScript syntax rules feat: add threshold kwargs for contains and contains_regex chore: update matlab syntax rule 2.1.2 \u00b6 feat: add C# syntax rule 2.1.1 \u00b6 feat: add C++ syntax rule 2.1.0 \u00b6 feat: add new constraints: is_in_hg_repo , is_in_svn_repo 2.0.1 \u00b6 refactor: improve is_extension constraint perf: optimize AbstractMatch.test_count() 2.0.0 \u00b6 If you are a user from v1 with custom syntax rules, check the migration guide . refactor: completely rewritten to utilize ST 4 APIs and Python 3.8 feat: users can define their syntax rules recursively with match rules and constraint rules feat: plugin logs are moved to a dedicated panel feat: auto_set_syntax_debug_information command to help user dump information for debugging For more details, visit the online documentation: https://jfcherng-sublime.github.io/ST-AutoSetSyntax/ 1.10.14 \u00b6 refactor: run the whole plugin_load() async 1.10.13 \u00b6 fix: logger level names for Python 3.8 1.10.12 \u00b6 chore: auto set Package Control messages to Markdown 1.10.11 \u00b6 fix: plugin may be not prepared yet 1.10.10 \u00b6 refactor: improve the logic to get the first line fix: plugin may be not prepared yet 1.10.9 \u00b6 perf: run time-consuming codes asynchronously 1.10.8 \u00b6 fix: should not activate this plugin on widgets 1.10.7 \u00b6 revert: Revert \"Add .python-version for ST4\" This plugin depends on \"pyyaml\" module, which is not available (Python 3.8) via package control at this moment. 1.10.6 \u00b6 Let Plain Text be the last choice. This makes requirements.txt-optional able to be detected as requirements.txt and have syntax highlighting if there is a syntax for it. Add \"-optional\" into try_filename_remove_exts . 1.10.5 \u00b6 Add \".orig\" to try_filename_remove_exts . Fix changing log level won't have effect immediately. 1.10.4 \u00b6 Add \"-dist\" to try_filename_remove_exts . Workaround inline regex flags (such as (?x: ... ) ) are not supported by Python 3.3. Workaround some syntax files that are unable to parse before. Fix log messages appear twice in ST's console. Improved log messages. Some refactor. 1.10.3 \u00b6 Put menu files to menus/ . Update try_filename_remove_exts . Add \"-dev\", \"-development\", \"-prod\", \"-production\", \"-test\", \".test\", \".tpl\". 1.10.2 \u00b6 Add the command to the command palette. 1.10.1 \u00b6 Use a new side-by-side window to edit settings. 1.10.0 \u00b6 New feature: Auto set syntax when creating a new file. See the \"new_file_syntax\" settings. 1.9.1 \u00b6 Remove debugging codes. 1.9.0 \u00b6 New feature: Auto set syntax by stripping file extensions. When opening a default configuration file like config.js.dist . Because there is no syntax for a .js.dist file or a .dist file, the file will be opened as plain text without syntax highlighting. This feature tries to remove some common unimportant extensions such as .dist , .sample , ... etc from the file name. And test the stripped file name config.js with syntax definitions and applies Javascript syntax to it. You could define extensions which would be tried to be removed in the try_filename_remove_exts settings. 1.8.7 \u00b6 Just some directory structure tweaks. 1.8.6 \u00b6 Fix autocomplete is triggered in quick panel & search panel (#3) 1.8.5 \u00b6 Add config for \"log_level\": \"NOTHING\" . \"NOTSET\" is not what I just thought. So add my own \"log_lovel\": \"NOTHING\" . 1.8.4 \u00b6 Load yaml module by Package Control dependencies.json . Move SyntaxMappings.py into a sub-directory. 1.8.3 \u00b6 Correct the usage of settings.add_on_change() .","title":"Changelog"},{"location":"changelog/#autosetsyntax-changelog","text":"","title":"AutoSetSyntax Changelog"},{"location":"changelog/#2102","text":"feat: detect \"shellcheck directive\" for bash/zsh","title":"2.10.2"},{"location":"changelog/#2101","text":"refactor: about ViewSnapshot ...","title":"2.10.1"},{"location":"changelog/#2100","text":"chore: improve .env files rules feat: new constraint: selector_matches feat: new constraint: is_hidden_syntax feat: new constraint: is_syntax","title":"2.10.0"},{"location":"changelog/#299","text":"chore: improve .env files for AFileIcon users","title":"2.9.9"},{"location":"changelog/#298","text":"feat: add rules for .env files refactor: guesslang server only has one model now","title":"2.9.8"},{"location":"changelog/#297","text":"fix: Unknown languageId from guesslang chore: remove useless Ruby rules","title":"2.9.7"},{"location":"changelog/#296","text":"fix: guesslang server doesn't response","title":"2.9.6"},{"location":"changelog/#295","text":"feat: add match kwarg to relative_exists constraint feat: tidy/add some new rules","title":"2.9.5"},{"location":"changelog/#294","text":"feat: new constraint: is_in_python_django_project refactor: replace is_rails_file with is_in_ruby_on_rails_project chore: improve Django template files detection","title":"2.9.4"},{"location":"changelog/#293","text":"feat: add Jinja2 rules for HTML files refactor: remove \"Migration\" things","title":"2.9.3"},{"location":"changelog/#292","text":"chore: update guesslang server","title":"2.9.2"},{"location":"changelog/#291","text":"chore: load plugin synchronously","title":"2.9.1"},{"location":"changelog/#290","text":"chore: update guesslang server feat: new constraint: is_line_count refactor: bump min ST version to 4114","title":"2.9.0"},{"location":"changelog/#286","text":"No change. Just to tackle with messed up versions.","title":"2.8.6"},{"location":"changelog/#285","text":"fix: syntax highlighting for log panel","title":"2.8.5"},{"location":"changelog/#284","text":"chore: tidy debug messages fix: empty \"on_events\" doesn't work as expected","title":"2.8.4"},{"location":"changelog/#283","text":"chore: change default trim_file_size to 20000 (about 20KB) chore: change default trim_first_line_length to 500 feat: debounce detection when text changes perf: fire on_text_changed_async only when syntax is plain text","title":"2.8.3"},{"location":"changelog/#282","text":"chore: update guesslang server chore: add .in into default_trim_suffixes","title":"2.8.2"},{"location":"changelog/#281","text":"chore: update guesslang server","title":"2.8.1"},{"location":"changelog/#280","text":"fix: guesslang on hidden file without an extension feat: auto set syntax for ST syntax test files This should be useful for those who have no file extension.","title":"2.8.0"},{"location":"changelog/#270","text":"feat: add new setting trim_suffixes_auto Apart from trim_suffixes , also try to remove every sub-extensions when finding a syntax match. For example, for the file foo.json.ext1.ext2.ext3 , this setting enables trying the following file names as well. foo.json.ext1.ext2 (no matching syntax) foo.json.ext1 (no matching syntax) foo.json (matches JSON syntax) If there is no JSON syntax, then foo will be tried.","title":"2.7.0"},{"location":"changelog/#2610","text":"fix: RuntimeError: dictionary changed size during iteration","title":"2.6.10"},{"location":"changelog/#269","text":"feat: treat files started with Makefile. as Makefile Such as Makefile.build , Makefile.debug , etc...","title":"2.6.9"},{"location":"changelog/#268","text":"chore: update guesslang server","title":"2.6.8"},{"location":"changelog/#267","text":"fix: Jenkinsfile is detected as Python fix: detect VIM syntax settings not only at the first line","title":"2.6.7"},{"location":"changelog/#266","text":"fix: nested MatchRules without \"match\" doesn't work (#11) refactor: get rid of \"..\" from path","title":"2.6.6"},{"location":"changelog/#265","text":"refactor: assume guesslang server starts if port is already in use","title":"2.6.5"},{"location":"changelog/#264","text":"chore: update language detection model","title":"2.6.4"},{"location":"changelog/#263","text":"refactor: allow manually run AI model on plain text file","title":"2.6.3"},{"location":"changelog/#262","text":"fix: auto_set_syntax_create_new_xxx commands not working fix: command name CamelCase refactor: simplify boot.py","title":"2.6.2"},{"location":"changelog/#261","text":"fix: internal states for running ClearLogPanel from command palette fix: modules should be reloaded when update plugin refactor: squash log messages if they are duplicate","title":"2.6.1"},{"location":"changelog/#260","text":"feat: introduce a new AI model ( vscode-regexp-languagedetection ) which comes from VSCode 1.65.0 It will be used by default for small buffer if guesslang.enabled is true . To use it, you have to run AutoSetSyntax: Download Guesslang Server from the command palette again.","title":"2.6.0"},{"location":"changelog/#250","text":"refactor: let guesslang server guess JS vs TS if possible feat: add new constraint: is_guesslang_enabled fix: \"invert\" typo in sublime-package.json","title":"2.5.0"},{"location":"changelog/#244","text":"chore: revise menu wording dosc: update missing 2.4.3 changelog refactor: remove leading plugin name from log panel refactor: tidy codes","title":"2.4.4"},{"location":"changelog/#243","text":"fix: set is_widget for the log panel","title":"2.4.3"},{"location":"changelog/#242","text":"docs: add use case for dim out build status from the build output panel fix: guesslang server connection failed on Linux refactor: bundled syntaxes","title":"2.4.2"},{"location":"changelog/#241","text":"refactor: refine scope for ExecOutput.sublime-syntax","title":"2.4.1"},{"location":"changelog/#240","text":"feat: set default syntax for build output panel fix: partial path syntax representation not working","title":"2.4.0"},{"location":"changelog/#2314","text":"fix: plugin is triggered before settings are ready refactor: make checking guesslang server started more clearly refactor: simply command auto_set_syntax_create_new_implementation","title":"2.3.14"},{"location":"changelog/#2313","text":"fix: correct type annotation for ExpandableVar fix: various constraints give wrong results pref: refactor generate_trimmed_strings() with trie refactor: make event_name into Enum","title":"2.3.13"},{"location":"changelog/#2312","text":"feat: add as YAML file: .clang-format , .clang-tidy , .clangd","title":"2.3.12"},{"location":"changelog/#2311","text":"feat: add .shared into trimmed suffixes refactor: simplify codes test: add an PHP as xxx.sh file sample","title":"2.3.11"},{"location":"changelog/#2310","text":"fix: always prefer shebang over filename chore: improve debug messages chore: update JSON rule as per ApplySytnax's","title":"2.3.10"},{"location":"changelog/#239","text":"feat: add case_insensitive for is_extension constraint docs: add hinting for Win7 with Node.js v14","title":"2.3.9"},{"location":"changelog/#238","text":"chore: fix outdated sublime-package.json contents feat: add a rule for ST/SM changelog.txt feat: add new constraints is_arch , is_platform and is_platform_arch fix: also try trimmed filename when triggered by a command","title":"2.3.8"},{"location":"changelog/#237","text":"feat: add a rule for SQL fix: head_tail_content() wrong tail content chore: add some debug message for guesslang","title":"2.3.7"},{"location":"changelog/#236","text":"fix: recheck view syntax again before setting syntax by guesslang","title":"2.3.6"},{"location":"changelog/#235","text":"fix: auto restart guesslang server after running install command fix: download guesslang server by chunks refactor: use hardcoded guesslang server download URL chore: also check guesslang server bin existence after downloading","title":"2.3.5"},{"location":"changelog/#234","text":"fix: auto_set_syntax_download_guesslang_server command doesn't create folder recursively","title":"2.3.4"},{"location":"changelog/#233","text":"fix: auto_set_syntax_download_guesslang_server command failure because files/directories are locked","title":"2.3.3"},{"location":"changelog/#232","text":"fix: do some basic checks for the guesslang-predicted syntax The model seems to predict some plain text as INI syntax quite frequently...","title":"2.3.2"},{"location":"changelog/#231","text":"fix: do not apply guesslang on files having an extension","title":"2.3.1"},{"location":"changelog/#230","text":"feat: predict syntax by a machine learning model This experimental feature is disabled by default. It provides the same feature which is introduced in VSCode 1.60. https://code.visualstudio.com/updates/v1_60#_automatic-language-detection If you want to try it, please check the following link. https://jfcherng-sublime.github.io/ST-AutoSetSyntax/experimental/ml-based-syntax-detection/ chore: reduce default trim_file_size setting from 5000 to 4000","title":"2.3.0"},{"location":"changelog/#226","text":"feat: add a rule for Java refactor: allow using view_clear_undo_stack in text commands refactor: use set_read_only to replace command_mode","title":"2.2.6"},{"location":"changelog/#225","text":"fix: View.clear_undo_stack can not be run inside TextCommand fix: some panel commands are not shown in command palette fix: scope:output.autosetsyntax.log not found during updating plugin","title":"2.2.5"},{"location":"changelog/#224","text":"fix: typo in default settings","title":"2.2.4"},{"location":"changelog/#223","text":"chore: prioritize plugin core syntax rules Otherwise, if the user has a bad syntax rule in user settings, that may make debug information always be set with a wrong syntax.","title":"2.2.3"},{"location":"changelog/#222","text":"chore: add some comments for sublime-package.json feat: add case_insensitive for is_name constraint feat: add a rule for qt.conf fix: is_size constraint has no AC in settings perf: speedup detecting TypoScript","title":"2.2.2"},{"location":"changelog/#221","text":"feat: add a rule for qt.conf","title":"2.2.1"},{"location":"changelog/#220","text":"fix: parse_regex_flags() for duplicate flags","title":"2.2.0"},{"location":"changelog/#2111","text":"fix: apply a syntax via VIM modeline","title":"2.1.11"},{"location":"changelog/#2110","text":"feat: add a rule for Qt's translation files fix: AttributeError: type object 'View' has no attribute 'clear_undo_stack'","title":"2.1.10"},{"location":"changelog/#219","text":"refactor: make trim_suffixes more sorted fix: clear undo stack for the log panel","title":"2.1.9"},{"location":"changelog/#218","text":"fix: AutoSetSyntax debug info is not auto set syntax refactor: generate syntax_rules and trim_suffixes more statically","title":"2.1.8"},{"location":"changelog/#217","text":"fix: set syntax during typing not working chore: use JSON for js/css source map","title":"2.1.7"},{"location":"changelog/#216","text":"fix: auto trimmed filename should only works on plain text","title":"2.1.6"},{"location":"changelog/#215","text":"fix: overkill changing .erb files back to HTML syntax","title":"2.1.5"},{"location":"changelog/#214","text":"feat: add lua syntax rule feat: improve is_interpreter to match VIM's syntax line","title":"2.1.4"},{"location":"changelog/#213","text":"feat: add Diff , JavaScript syntax rules feat: add threshold kwargs for contains and contains_regex chore: update matlab syntax rule","title":"2.1.3"},{"location":"changelog/#212","text":"feat: add C# syntax rule","title":"2.1.2"},{"location":"changelog/#211","text":"feat: add C++ syntax rule","title":"2.1.1"},{"location":"changelog/#210","text":"feat: add new constraints: is_in_hg_repo , is_in_svn_repo","title":"2.1.0"},{"location":"changelog/#201","text":"refactor: improve is_extension constraint perf: optimize AbstractMatch.test_count()","title":"2.0.1"},{"location":"changelog/#200","text":"If you are a user from v1 with custom syntax rules, check the migration guide . refactor: completely rewritten to utilize ST 4 APIs and Python 3.8 feat: users can define their syntax rules recursively with match rules and constraint rules feat: plugin logs are moved to a dedicated panel feat: auto_set_syntax_debug_information command to help user dump information for debugging For more details, visit the online documentation: https://jfcherng-sublime.github.io/ST-AutoSetSyntax/","title":"2.0.0"},{"location":"changelog/#11014","text":"refactor: run the whole plugin_load() async","title":"1.10.14"},{"location":"changelog/#11013","text":"fix: logger level names for Python 3.8","title":"1.10.13"},{"location":"changelog/#11012","text":"chore: auto set Package Control messages to Markdown","title":"1.10.12"},{"location":"changelog/#11011","text":"fix: plugin may be not prepared yet","title":"1.10.11"},{"location":"changelog/#11010","text":"refactor: improve the logic to get the first line fix: plugin may be not prepared yet","title":"1.10.10"},{"location":"changelog/#1109","text":"perf: run time-consuming codes asynchronously","title":"1.10.9"},{"location":"changelog/#1108","text":"fix: should not activate this plugin on widgets","title":"1.10.8"},{"location":"changelog/#1107","text":"revert: Revert \"Add .python-version for ST4\" This plugin depends on \"pyyaml\" module, which is not available (Python 3.8) via package control at this moment.","title":"1.10.7"},{"location":"changelog/#1106","text":"Let Plain Text be the last choice. This makes requirements.txt-optional able to be detected as requirements.txt and have syntax highlighting if there is a syntax for it. Add \"-optional\" into try_filename_remove_exts .","title":"1.10.6"},{"location":"changelog/#1105","text":"Add \".orig\" to try_filename_remove_exts . Fix changing log level won't have effect immediately.","title":"1.10.5"},{"location":"changelog/#1104","text":"Add \"-dist\" to try_filename_remove_exts . Workaround inline regex flags (such as (?x: ... ) ) are not supported by Python 3.3. Workaround some syntax files that are unable to parse before. Fix log messages appear twice in ST's console. Improved log messages. Some refactor.","title":"1.10.4"},{"location":"changelog/#1103","text":"Put menu files to menus/ . Update try_filename_remove_exts . Add \"-dev\", \"-development\", \"-prod\", \"-production\", \"-test\", \".test\", \".tpl\".","title":"1.10.3"},{"location":"changelog/#1102","text":"Add the command to the command palette.","title":"1.10.2"},{"location":"changelog/#1101","text":"Use a new side-by-side window to edit settings.","title":"1.10.1"},{"location":"changelog/#1100","text":"New feature: Auto set syntax when creating a new file. See the \"new_file_syntax\" settings.","title":"1.10.0"},{"location":"changelog/#191","text":"Remove debugging codes.","title":"1.9.1"},{"location":"changelog/#190","text":"New feature: Auto set syntax by stripping file extensions. When opening a default configuration file like config.js.dist . Because there is no syntax for a .js.dist file or a .dist file, the file will be opened as plain text without syntax highlighting. This feature tries to remove some common unimportant extensions such as .dist , .sample , ... etc from the file name. And test the stripped file name config.js with syntax definitions and applies Javascript syntax to it. You could define extensions which would be tried to be removed in the try_filename_remove_exts settings.","title":"1.9.0"},{"location":"changelog/#187","text":"Just some directory structure tweaks.","title":"1.8.7"},{"location":"changelog/#186","text":"Fix autocomplete is triggered in quick panel & search panel (#3)","title":"1.8.6"},{"location":"changelog/#185","text":"Add config for \"log_level\": \"NOTHING\" . \"NOTSET\" is not what I just thought. So add my own \"log_lovel\": \"NOTHING\" .","title":"1.8.5"},{"location":"changelog/#184","text":"Load yaml module by Package Control dependencies.json . Move SyntaxMappings.py into a sub-directory.","title":"1.8.4"},{"location":"changelog/#183","text":"Correct the usage of settings.add_on_change() .","title":"1.8.3"},{"location":"commands/","text":"Commands \u00b6 Main \u00b6 auto_set_syntax \u00b6 Example { \"caption\" : \"AutoSetSyntax: Auto Set Syntax\" , \"command\" : \"auto_set_syntax\" , }, This command tries to set the syntax for the current view. Info You may consider AutoSetSyntax is kind of working in a way that it checks some prerequisites and triggers the auto_set_syntax command automatically. Although actually, AutoSetSyntax doesn't trigger the command. Implementation \u00b6 auto_set_syntax_create_new_constraint \u00b6 Example { \"caption\" : \"AutoSetSyntax: Create New Constrant\" , \"command\" : \"auto_set_syntax_create_new_constraint\" , }, This command creates a template for a new Constraint implementation. auto_set_syntax_create_new_match \u00b6 Example { \"caption\" : \"AutoSetSyntax: Create New Match\" , \"command\" : \"auto_set_syntax_create_new_match\" , }, This command creates a template for a new Match implementation. Logging \u00b6 auto_set_syntax_toogle_log_panel \u00b6 Example { \"caption\" : \"AutoSetSyntax: Toggle Log Panel\" , \"command\" : \"auto_set_syntax_toggle_log_panel\" , }, This command toggles the AutoSetSyntax log panel for the current window. auto_set_syntax_clear_log_panel \u00b6 Example { \"caption\" : \"AutoSetSyntax: Clear Log Panel\" , \"command\" : \"auto_set_syntax_clear_log_panel\" , }, This command clears the AutoSetSyntax log panel for the current window. Debugging \u00b6 auto_set_syntax_debug_information \u00b6 Example { \"caption\" : \"AutoSetSyntax: Debug Information\" , \"command\" : \"auto_set_syntax_debug_information\" , }, This command copies information for debugging to the clipboard. Check \" Debug \" for more details.","title":"Commands"},{"location":"commands/#commands","text":"","title":"Commands"},{"location":"commands/#main","text":"","title":"Main"},{"location":"commands/#auto_set_syntax","text":"Example { \"caption\" : \"AutoSetSyntax: Auto Set Syntax\" , \"command\" : \"auto_set_syntax\" , }, This command tries to set the syntax for the current view. Info You may consider AutoSetSyntax is kind of working in a way that it checks some prerequisites and triggers the auto_set_syntax command automatically. Although actually, AutoSetSyntax doesn't trigger the command.","title":"auto_set_syntax"},{"location":"commands/#implementation","text":"","title":"Implementation"},{"location":"commands/#auto_set_syntax_create_new_constraint","text":"Example { \"caption\" : \"AutoSetSyntax: Create New Constrant\" , \"command\" : \"auto_set_syntax_create_new_constraint\" , }, This command creates a template for a new Constraint implementation.","title":"auto_set_syntax_create_new_constraint"},{"location":"commands/#auto_set_syntax_create_new_match","text":"Example { \"caption\" : \"AutoSetSyntax: Create New Match\" , \"command\" : \"auto_set_syntax_create_new_match\" , }, This command creates a template for a new Match implementation.","title":"auto_set_syntax_create_new_match"},{"location":"commands/#logging","text":"","title":"Logging"},{"location":"commands/#auto_set_syntax_toogle_log_panel","text":"Example { \"caption\" : \"AutoSetSyntax: Toggle Log Panel\" , \"command\" : \"auto_set_syntax_toggle_log_panel\" , }, This command toggles the AutoSetSyntax log panel for the current window.","title":"auto_set_syntax_toogle_log_panel"},{"location":"commands/#auto_set_syntax_clear_log_panel","text":"Example { \"caption\" : \"AutoSetSyntax: Clear Log Panel\" , \"command\" : \"auto_set_syntax_clear_log_panel\" , }, This command clears the AutoSetSyntax log panel for the current window.","title":"auto_set_syntax_clear_log_panel"},{"location":"commands/#debugging","text":"","title":"Debugging"},{"location":"commands/#auto_set_syntax_debug_information","text":"Example { \"caption\" : \"AutoSetSyntax: Debug Information\" , \"command\" : \"auto_set_syntax_debug_information\" , }, This command copies information for debugging to the clipboard. Check \" Debug \" for more details.","title":"auto_set_syntax_debug_information"},{"location":"configurations/","text":"Configurations \u00b6 Settings \u00b6 Sometimes, a good way to learn about settings is reading an existing one. AutoSetSyntax.sublime-settings { ////////////////////////////////////////////////////////// // Online Documentations // // https://jfcherng-sublime.github.io/ST-AutoSetSyntax/ // ////////////////////////////////////////////////////////// /////////////////// // User Settings // /////////////////// // Enable plugin log (in a dedicated panel) \"enable_log\" : true , // Set default syntax for build outputs. // Can be one of following formats: // - Syntax top scope: \"scope:text.html.markdown\" // - Partial/full syntax file path: \"Markdown/Markdown.\" // - The name of the syntax: \"Markdown\" (which is shown in the bottom-right corner of ST) // - An empty string, which does nothing \"exec_file_syntax\" : \"Packages/AutoSetSyntax/syntaxes/ExecOutput.sublime-syntax\" , // Set default syntax for new files. You can use multiple formats as described above. \"new_file_syntax\" : \"\" , // Run \"auto_set_syntax\" command on views which exist before the plugin is loaded? \"run_on_startup_views\" : false , // The max lookup size for the file. // A negative number means no limit, which may have performance issue on large files. \"trim_file_size\" : 20000 , // about 20KB // The max lookup length for the first line. // A negative number means no limit, which may have performance issue on a long first line. \"trim_first_line_length\" : 500 , // Apart from \"trim_suffixes\", also try to remove every sub-extensions when finding a syntax match. \"trim_suffixes_auto\" : false , // Syntax rules that will be checked one by one. // This plugin will assign the syntax in the first satisfied rule to the view. // You may want to see \"default_syntax_rules\" for some examples. \"user_syntax_rules\" : [], // Suffixes that will be used to right trim the filename. // By doing that, the file may be then auto set syntax with a trimmed filename. \"user_trim_suffixes\" : [], ////////////////////// // Project Settings // //////////////////////////////////////////////////////////////////////////// // You shouldn't change these settings here but in your project settings. // //////////////////////////////////////////////////////////////////////////// // Syntax rules that will be checked one by one. // This plugin will assign the syntax in the first satisfied rule to the view. // You may want to see \"default_syntax_rules\" for some examples. \"project_syntax_rules\" : [], // Suffixes that will be used to right trim the filename. // By doing that, the file may be then auto set syntax with a trimmed filename. \"project_trim_suffixes\" : [], ////////////////////// // Default Settings // //////////////////////////////////////////////////////////////////////////// // If you override default rules, they will not be updated in the future. // // If you want to add new rules, add them in user settings. // //////////////////////////////////////////////////////////////////////////// // Syntax rules that will be checked one by one. // This plugin will assign the syntax in the first satisfied rule to the view. \"default_syntax_rules\" : [ // syntax rule { \"syntaxes\" : \"scope:source.python\" , \"selector\" : \"text.plain\" , // match rule \"match\" : \"all\" , // \"any\" by default \"rules\" : [ // constraint rule { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^(?:def|class)\\\\s\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^import(?!\\\\s+groovy)(?:$|[\\\\s(])\" , \"^from\\\\s+[a-zA-Z.]+\\\\s+import(?:$|[\\\\s(])\" ] } ] }, { \"comment\" : \"Basic INI files\" , \"syntaxes\" : \"scope:source.ini\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"is_name\" , \"args\" : [ \".minttyrc\" , \".wslconfig\" ] } ] }, { \"comment\" : \"Basic JSON files\" , \"syntaxes\" : \"scope:source.json\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"is_extension\" , \"args\" : [ \".css.map\" , \".geojson\" , \".js.map\" , \".jsonc\" , \".webmanifest\" ] }, { \"constraint\" : \"is_name\" , \"args\" : [ \".babelrc\" , \".bowerrc\" , \".csslintrc\" , \".eslintrc\" , \".jscsrc\" , \".jshintrc\" , \".markdownlintrc\" , \".stylelintrc\" ] } ] }, { \"comment\" : \"Basic YAML files\" , \"syntaxes\" : \"scope:source.yaml\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"is_name\" , \"args\" : [ \".clang-format\" , \".clang-tidy\" , \".clangd\" ] } ] }, { \"syntaxes\" : [ \"scope:source.shell.bash\" ], \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"is_name\" , \"args\" : [ \"profile\" , \".bash_history\" ] }, { \"constraint\" : \"name_contains_regex\" , \"args\" : [ \"\\\\.(?:bash|z(?:shrc|shenv|profile|login|logout))(?:\\\\.[^/]*)?$\" ] }, { \"constraint\" : \"first_line_contains_regex\" , \"args\" : [ // @see https://www.shellcheck.net/wiki/SC2148 \"^\\\\s*#\\\\s+shellcheck\\\\s+shell=(?:bash|zsh)\" ] } ] }, { \"comment\" : \"Linux .env files\" , \"syntaxes\" : [ \"/DotENV.\" , // https://packagecontrol.io/packages/DotENV \"scope:source.shell.bash\" ], \"selector\" : \"\" , \"match\" : \"all\" , \"rules\" : [ { \"rules\" : [ { \"constraint\" : \"selector_matches\" , \"args\" : [ \"text.plain\" ] }, { \"constraint\" : \"is_hidden_syntax\" } ] }, { \"rules\" : [ { \"constraint\" : \"is_name\" , \"args\" : [ \".envrc\" ] }, { \"constraint\" : \"name_contains_regex\" , \"args\" : [ \"\\\\.(?:env)(?:\\\\.[^/]*)?$\" ] } ] } ] }, { \"syntaxes\" : \"scope:text.git.config\" , \"selector\" : \"- text.git.config\" , \"rules\" : [ { \"constraint\" : \"path_contains_regex\" , \"args\" : [ \"^.*/.git/config$\" ] } ] }, { // at least, C++ is a super set of C in ST's syntax aspect \"syntaxes\" : \"scope:source.c++\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"contains_regex\" , \"args\" : [ \"(?:^|\\\\s)#include\\\\s*[<\\\"]\" , \"(?:^|\\\\s)#pragma\\\\s+(?:once|pack|(?:pop|push)_macro|warning)(?=$|\\\\s)\" , \"(?:^|\\\\s)template\\\\s*<\\\\s*(?:class|typename)(?=$|\\\\s)\" , // some strong characteristics of keywords \"\\\\b(?:const(?:eval|expr|init)|decltype|nullptr|(?:const|dynamic|reinterpret|static)_cast)(?=$|\\\\s)\" ] } ] }, { \"syntaxes\" : \"scope:source.cs\" , \"selector\" : \"text.plain\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^using\\\\s\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^namespace\\\\s\" ] } ] }, { \"syntaxes\" : \"scope:source.diff\" , \"selector\" : \"text.plain\" , \"rules\" : [ // path headers { \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^\\\\+{3} \" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^-{3} \" ] } ] }, // context line numbers { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^@@ -\\\\d+,\\\\d+ \\\\+\\\\d+,\\\\d+ @@\" ] } ] }, { \"syntaxes\" : \"scope:source.go\" , \"selector\" : \"text.plain\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^(?:package)\\\\s\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^(?:import|func|type)\\\\s\" ] } ] }, { \"syntaxes\" : [ \"Jenkinsfile\" , \"scope:source.groovy\" ], \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"name_contains_regex\" , \"args\" : [ \"^Jenkinsfile(?=\\\\b|_)\" ] } ] }, { \"syntaxes\" : \"scope:source.java\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"first_line_contains_regex\" , \"args\" : [ \"^\\\\s*import\\\\s+java\\\\.\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"\\\\bimport\\\\s+java\\\\.\" , \"\\\\bSystem\\\\.out\\\\.println\\\\s*\\\\(\" ], \"kwargs\" : { \"threshold\" : 2 } } ] }, { \"syntaxes\" : \"scope:source.js\" , \"selector\" : \"text.plain\" , \"match\" : \"all\" , \"rules\" : [ // the guesslang server does a better job at guessing JavaScript vs TypeScript { \"constraint\" : \"is_guesslang_enabled\" , \"inverted\" : true }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"\\\\bconsole\\\\.(?:assert|debug|error|info|log|trace|warn)\\\\s*\\\\(\" , \"(?:^|\\\\s)export\\\\s+default\\\\s\" ] } ] }, { \"syntaxes\" : \"scope:source.lua\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"is_name\" , \"args\" : [ \".conkyrc\" ] }, { \"constraint\" : \"is_interpreter\" , \"args\" : [ \"lua\" ] } ] }, { \"comment\" : \"Makefile\" , \"syntaxes\" : [ \"scope:source.makefile\" ], \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"name_contains_regex\" , \"args\" : [ \"^Makefile\\\\.\" ], \"kwargs\" : { \"regex_flags\" : [ \"IGNORECASE\" ] } } ] }, { // use the % regex to detect Matlab files \"syntaxes\" : \"scope:source.matlab\" , \"selector\" : \"text.plain | source.objc\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"is_extension\" , \"args\" : [ \".m\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^\\\\s*%\" ], \"kwargs\" : { \"threshold\" : 2 } } ] }, { // .m files could be Objective-C or Matlab files // We first use a rather reliable regex from GitHub // https://github.com/github/linguist/blob/master/lib/linguist/heuristics.rb#L69 // to apply syntax for Objective-C files \"syntaxes\" : \"scope:source.objc\" , \"selector\" : \"text.plain | source.matlab\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"is_extension\" , \"args\" : [ \".m\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^\\\\s*(?:@(?:interface|class|protocol|property|end|synchronised|selector|implementation)\\\\b|#import\\\\s+.+\\\\.h[\\\">])\" ] } ] }, { \"comment\" : \"\\\"Ruby on Rails\\\" project\" , \"syntaxes\" : \"scope:source.ruby.rails\" , \"selector\" : \"source.ruby\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"is_extension\" , \"args\" : [ \".rb\" , \".rake\" ] }, { \"constraint\" : \"is_in_ruby_on_rails_project\" } ] }, { \"syntaxes\" : \"scope:source.ruby\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"is_extension\" , \"args\" : [ \".simplecov\" ] }, { \"constraint\" : \"is_name\" , \"args\" : [ \"Cartfile\" , \"Cartfile.private\" , \"Cartfile.resolved\" , \"config.ru\" ], \"kwargs\" : { \"case_insensitive\" : true } }, { \"constraint\" : \"is_interpreter\" , \"args\" : [ \"ruby\" ] } ] }, { // Meteor templates follow Handlebars syntax, but must end in .html; // but they also always begin with `<template name=` \"syntaxes\" : \"scope:text.html.handlebars\" , \"selector\" : \"text.plain | text.html\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"is_extension\" , \"args\" : [ \".html\" ] }, { \"constraint\" : \"first_line_contains_regex\" , \"args\" : [ \"^<template name=\" ] } ] }, { \"comment\" : \"Django templates\" , \"syntaxes\" : [ \"scope:text.jinja\" , \"scope:text.html.jinja\" ], \"selector\" : \"text.html.basic\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"path_contains\" , \"args\" : [ \"/templates/\" ] }, { \"constraint\" : \"is_in_python_django_project\" } ] }, { \"comment\" : \"Jinja2/Twig HTML files\" , \"syntaxes\" : [ \"scope:text.jinja\" , \"scope:text.html.jinja\" , \"scope:text.html.twig\" ], \"selector\" : \"text.html.basic\" , \"rules\" : [ { \"constraint\" : \"contains_regex\" , \"args\" : [ \"{{\" , // https://jinja.palletsprojects.com/en/latest/templates/ \"{%\\\\s*(?:autoescape|call|elif|else|extends|filter|for|from|if|import|include|macro|set|trans|with)\\\\b\" ], \"kwargs\" : { \"threshold\" : 4 } } ] }, { \"syntaxes\" : \"scope:source.sql\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"first_line_contains\" , \"args\" : [ \"-- phpMyAdmin SQL Dump\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"\\\\bCREATE\\\\s+TABLE\\\\s+IF\\\\s+NOT\\\\s+EXISTS\\\\b\" ], \"kwargs\" : { \"regex_flags\" : [ \"MULTILINE\" , \"IGNORECASE\" ] } } ] }, { \"syntaxes\" : \"scope:source.typoscript\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"is_name\" , \"args\" : [ \"ext_conf_template.txt\" , \"ext_typoscript_constants.txt\" , \"ext_typoscript_setup.txt\" ] }, { \"constraint\" : \"path_contains_regex\" , \"args\" : [ \"^.*/(?:fileadmin|typo3|TypoScript).*/(?:setup|constants)\\\\.txt$\" ] } ] }, { \"comment\" : \"Apache config\" , \"syntaxes\" : \"scope:source.apacheconf\" , \"selector\" : \"text.plain | source.nginx\" , \"rules\" : [ { \"constraint\" : \"path_contains_regex\" , \"args\" : [ \"\\\\b(?i:apache|httpd)\\\\b.*/conf/.*\\\\.conf$\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"<(?:VirtualHost|Directory|Macro)(?:$|\\\\s)\" ] } ] }, { \"comment\" : \"NGINX config\" , \"syntaxes\" : \"scope:source.nginx\" , \"selector\" : \"text.plain | source.apacheconf\" , \"rules\" : [ { \"constraint\" : \"path_contains_regex\" , \"args\" : [ \"\\\\b(?i:nginx)\\\\b.*/conf/.*\\\\.conf$\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^\\\\s*(?:location\\\\s+(?:[~=/a-zA-Z])|(?:fastcgi_param|charset_map)\\\\s)\" ] } ] }, { // @see https://doc.qt.io/qt-5/qt-conf.html \"comment\" : \"Qt's config file\" , \"syntaxes\" : \"scope:source.ini\" , \"selector\" : \"- source.ini\" , \"rules\" : [ { \"constraint\" : \"is_name\" , \"args\" : [ \"qt.conf\" ] } ] }, { // @see https://doc.qt.io/qtvstools/qtvstools-translation-files.html \"comment\" : \"Qt's translation file\" , \"syntaxes\" : \"scope:text.xml\" , \"selector\" : \"source.ts\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"is_extension\" , \"args\" : [ \".ts\" ] }, { \"constraint\" : \"first_line_contains_regex\" , \"args\" : [ \"^\\\\s*<\\\\?xml(?:$|\\\\s)\" ] } ] }, { \"comment\" : \"Sublime Text/Merge changelog\" , \"syntaxes\" : \"scope:text.html.basic\" , \"selector\" : \"text.plain\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"is_name\" , \"args\" : [ \"changelog.txt\" ] }, { \"constraint\" : \"relative_exists\" , \"args\" : [ \"sublime_text\" , \"sublime_text.exe\" , \"sublime_merge\" , \"sublime_merge.exe\" ] } ] }, { \"comment\" : \"Package Control: Package installation/update messages\" , \"syntaxes\" : \"scope:text.html.markdown\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"first_line_contains_regex\" , \"args\" : [ \"^Package Control Messages(?:$|\\\\s)\" ] } ] } ], // Suffixes that will be used to right trim the filename. // By doing that, the file may be then auto set syntax with a trimmed filename. \"default_trim_suffixes\" : [ \"-dev\" , \"-development\" , \"-dist\" , \"-optional\" , \"-prod\" , \"-production\" , \"-test\" , \".backup\" , \".bak\" , \".default\" , \".dev\" , \".dist\" , \".example\" , \".in\" , \".inc\" , \".include\" , \".local\" , \".orig\" , \".out\" , \".sample\" , \".shared\" , \".temp\" , \".test\" , \".tmp\" , \".tpl\" ], /////////////////// // Core Settings // ////////////////////////////////////////////////////////////////////////////////// // These settings make this plugin function normally. You shouldn't touch them. // ////////////////////////////////////////////////////////////////////////////////// \"core_syntax_rules\" : [ { \"comment\" : \"AutoSetSyntax Debug Information\" , \"syntaxes\" : \"scope:source.python\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"first_line_contains_regex\" , \"args\" : [ \"^# === AutoSetSyntax Debug Information === #\" ] } ] } ], /////////////////////////////////////// // Guesslang settings (experimental) // ///////////////////////////////////////////////////////////////////////// // You have to restart ST after modifying any of guesslang's settings. // ///////////////////////////////////////////////////////////////////////// // To use this feature, you have to install the server. // @see https://jfcherng-sublime.github.io/ST-AutoSetSyntax/experimental/ml-based-syntax-detection/#prerequisites \"guesslang.enabled\" : false , // The path of the node/node.exe executable. // You can use \"${lsp_utils_node_bin}\" if your Node.js is installed by lsp_utils \"guesslang.node_bin\" : \"node\" , \"guesslang.port\" : 15151 , \"guesslang.confidence_threshold\" : 0.15 , \"guesslang.syntax_map\" : { \"asm\" : [ // no good way to do this? \"scope:source.asm.x86_64\" , \"scope:source.asm.arm\" , \"scope:source.rvasm\" , \"scope:source.assembly\" ], \"bat\" : [ \"scope:source.dosbatch\" ], \"c\" : [ \"scope:source.c\" ], \"cbl\" : [ \"scope:source.cobol\" ], \"clj\" : [ \"scope:source.clojure\" ], \"cmake\" : [ \"scope:source.cmake\" ], \"coffee\" : [ \"scope:source.coffee\" ], \"cpp\" : [ \"scope:source.c++\" ], \"cs\" : [ \"scope:source.cs\" ], \"css\" : [ // SCSS is a superset and this server can't distinguish SCSS and CSS \"scope:source.scss\" , \"scope:source.css\" ], \"csv\" : [ \"scope:text.advanced_csv\" , \"scope:text.csv\" ], \"dart\" : [ \"scope:source.dart\" ], \"dm\" : [ \"scope:source.dm\" ], \"dockerfile\" : [ \"scope:source.dockerfile\" ], \"erl\" : [ \"scope:source.erlang\" ], \"ex\" : [ \"scope:source.elixir\" ], \"f90\" : [ \"scope:source.modern-fortran\" ], \"go\" : [ \"scope:source.go\" ], \"groovy\" : [ \"scope:source.groovy\" ], \"hs\" : [ \"scope:source.haskell\" ], \"html\" : [ \"scope:text.html.basic\" ], \"ini\" : [ \"scope:source.ini\" ], \"java\" : [ \"scope:source.java\" ], \"jl\" : [ \"scope:source.julia\" ], \"js\" : [ \"scope:source.js\" ], \"json\" : [ \"scope:source.json\" ], \"kt\" : [ \"scope:source.Kotlin\" ], \"lisp\" : [ \"scope:source.lisp\" ], \"lua\" : [ \"scope:source.lua\" ], \"makefile\" : [ \"scope:source.makefile\" ], \"matlab\" : [ \"scope:source.matlab\" ], \"md\" : [ \"scope:text.html.markdown\" ], \"ml\" : [], // what is this? \"mm\" : [ \"objective-c\" ], \"pas\" : [ \"scope:source.pascal\" ], \"php\" : [ \"scope:embedding.php\" , \"scope:text.html.php\" ], \"pl\" : [ \"scope:source.perl\" ], \"pm\" : [], // what is this? \"prolog\" : [ \"scope:source.prolog\" ], \"ps1\" : [ \"scope:source.powershell\" ], \"py\" : [ \"scope:source.python\" ], \"r\" : [ \"scope:source.r\" ], \"rb\" : [ \"scope:source.ruby\" ], \"rs\" : [ \"scope:source.rust\" ], \"scala\" : [ \"scope:source.scala\" ], \"sh\" : [ \"scope:source.shell.bash\" ], \"sql\" : [ \"scope:source.sql\" ], \"swift\" : [ \"scope:source.swift\" ], \"tex\" : [ \"scope:text.tex.latex\" ], \"toml\" : [ \"scope:source.toml\" ], \"ts\" : [ \"scope:source.ts\" ], \"v\" : [ \"scope:source.verilog\" ], \"vba\" : [ \"scope:source.vbs\" ], \"xml\" : [ \"scope:text.xml\" ], \"yml\" : [ \"scope:source.yaml\" ], // extra from vscode-regexp-languagedetection (modelLangToVSCodeLang) \"coffeescript\" : [ \"=coffee\" ], \"csharp\" : [ \"=cs\" ], \"erlang\" : [ \"=erl\" ], \"haskell\" : [ \"=hs\" ], \"javascript\" : [ \"=js\" ], \"markdown\" : [ \"=md\" ], \"objective-c\" : [ \"=mm\" ], \"perl\" : [ \"=pl\" ], \"powershell\" : [ \"=ps1\" ], \"python\" : [ \"=py\" ], \"ruby\" : [ \"=rb\" ], \"rust\" : [ \"=rs\" ], \"shellscript\" : [ \"=sh\" ], \"typescript\" : [ \"=ts\" ], \"yaml\" : [ \"=yml\" ] } } enable_log \u00b6 Type Default boolean true This setting control whether this plugin creates a dedicated log message panel. Since the panel won't affect other plugins, the default value is true . exec_file_syntax \u00b6 Type Default string \"Packages/AutoSetSyntax/syntaxes/ExecOutput.sublime-syntax\" This setting controls what syntax a build output should use. The value can be any of the followings: An empty string, which does nothing. A syntax representation . new_file_syntax \u00b6 Type Default string \"\" This setting controls what syntax a new file should use. The value can be any of the followings: An empty string, which does nothing. A syntax representation . run_on_startup_views \u00b6 Type Default boolean false This setting controls whether you want to run the auto_set_syntax command on views which exist before the plugin is loaded. If ST starts from cold start, this settings is necessary to set syntax for the just opened file. Info When ST starts up, there may be views that exists before plugins are loaded. Those views won't trigger on_load or on_load_async event listener in plugins. But those views will be put as an argument for the on_init event. For some people, they may even have hundreds of tabs opened. They may not want a plugin to run on all those views when ST starts up. trim_file_size \u00b6 Type Default integer 20000 (about 20KB) Detecting the syntax for the whole file can be resource-consuming if the file is large. This setting approximately controls how many bytes should be used to represent a file. trim_first_line_length \u00b6 Type Default integer 500 Detecting the syntax for the whole first line can be resource-consuming if it's a super long one-line file. This setting controls how many characters should be used to represent the first line. trim_suffixes_auto \u00b6 Type Default boolean false Apart from trim_suffixes , also try to remove every sub-extensions when finding a syntax match. For example, for the file foo.json.ext1.ext2.ext3 , this setting enables trying the following file names as well. foo.json.ext1.ext2 (no matching syntax) foo.json.ext1 (no matching syntax) foo.json (matches JSON syntax) If there is no JSON syntax, then foo will be tried. default_syntax_rules \u00b6 Syntax rules are the key part of AutoSetSyntax. Structure of syntax rules \"default_syntax_rules\" : [ // syntax rule { \"comment\" : \"...\" , \"syntaxes\" : \"...\" , \"selector\" : \"...\" , \"on_events\" : null , // match rule \"match\" : \"...\" , \"rules\" : [ // constraint rule { \"constraint\" : \"...\" , \"args\" : [ \"...\" ], }, // match rule { \"match\" : \"...\" , \"rules\" : [ // can be recursive... ], }, ], }, // more syntax rules... ], Syntax rule Match rule Constraint rule A syntax rule contains comment , syntaxes , selector , on_events and an expanded top-level match rule . Arguments comment syntaxes selector on_events This is just a optional string which explains what this syntax rule is for. It may make your debugging easier. syntaxes is a list of syntax representation . If there is only one syntax, you can simply un-list it into a string. If the top-level match is satisfied by rules , the first usable syntax in syntaxes will be assigned to the view. Limit this syntax rule only works when the selector matches the top scope. Learn more about selectors from ST official docs . on_events is a list of event names or (by default) null . It's used to restrict this syntax rule only works if this run is triggered by some certain events. If it's null , then there is no restriction. Failure If you use an empty list, then this syntax rule will never be evaluated. Available Events Event Name Meaning \"command\" This run is triggered by the auto_set_syntax command. \"init\" This run is triggered by startup views. \"load\" This run is triggered because a file gets loaded. \"modify\" This run is triggered because of a buffer modification. \"new\" This run is triggered because of a newly created window. \"reload\" This run is triggered because a file has been reloaded. \"revert\" This run is triggered because of the revert command. \"save\" This run is triggered because of the buffer gets saved. \"untransientize\" This run is triggered because a transient view becomes a normal view. A match rule may recursively contain any amount of match rule and constraint rule so you can build complex rules basing on your needs. Arguments The default value of the match is \"any\" , which tests whether there is any rules satisfied. Tip You may learn more about built-in match es here . A constraint rule is the lowest-level rule, which tests an actual constraint. Tip You may learn more about built-in constraint s here . Warning It's not recommended to directly override default_syntax_rules because that stops you from possible future updates for default_syntax_rules . The recommended way is putting your syntax rules in user_syntax_rules . And put project-specific syntax rules in project_syntax_rules in project settings . default_trim_suffixes \u00b6 Type Default string[] [ \".dist\" , \".local\" , /* many other suffixes */ ] These suffixes are considered unimportant in a file name. AutoSetSyntax will try to remove them from the file name and maybe a syntax will be found for a trimmed file name. Warning It's not recommended to directly override default_trim_suffixes because that stops you from possible future updates for default_trim_suffixes . The recommended way is putting your suffixes in user_trim_suffixes . And put project-specific suffixes in project_trim_suffixes in project settings . Terms and Explanations \u00b6 Syntax Representations \u00b6 When we talk about setting \"syntax\" in plugin settings, there are three ways you can use. Example Let's take the built-in JavaScript syntax as an example. By scope By name By path Summary You can use \"scope:TOP_SCOPE\" to represents a syntax. For example, the top scope of JavaScript is source.js . Thus, you can use \"scope:source.js\" . Tip To show the scope at the caret position, press Ctrl + Alt + Shift + P . You can use the syntax name to represent a syntax. For example, it's JavaScript for the JavaScript syntax. Thus, you can use \"JavaScript\" . Info The syntax name is shown in the bottom-right corner of ST . Warning If you manually type a syntax name, note that it's case-sensitive. You can use a partial path (or a full one if you prefer) of a syntax to represent it. For example, the full path for the JavaScript syntax is Packages/JavaScript/JavaScript.sublime-syntax . Theoretically, you may use any substring of the full path to represent it. But if your partial path is not unique, it may represent other syntaxes as well and causes unwanted behavior. Thus, if you want to go the \"by path\" way, I recommend using \"/JavaScript/JavaScript.\" . All of followings represent the same syntax, JavaScript . Top scope: \"scope:source.js\" Name: \"JavaScript\" Partial path: \"/JavaScript/JavaScript.\" Full path: \"Packages/JavaScript/JavaScript.sublime-syntax\" Project Settings \u00b6 To edit project settings, go to Project \u00bb Edit Project . Example { \"folders\" : [ // ... ], \"settings\" : { \"AutoSetSyntax\" : { // use JavaScript as the new file syntax \"new_file_syntax\" : \"scope:source.js\" , \"project_syntax_rules\" : [ // specific rules only for this project ], \"project_trim_suffixes\" : [ // specific trimmed suffixes only for this project ], // maybe other plugin settings... }, }, } You can override any plugin setting in project settings. But most likely, you are just interested in new_file_syntax , project_syntax_rules and probably project_trim_suffixes . Appendix \u00b6 Built-in Match es \u00b6 all \u00b6 Example { \"match\" : \"all\" , \"rules\" : [ /* some match rules or constraint rules */ ], } Test whether all rules in rules are satisfied. any \u00b6 Example { \"match\" : \"any\" , \"rules\" : [ /* some match rules or constraint rules */ ], } Test whether there is any rule in rules satisfied. ratio \u00b6 Example { \"match\" : \"ratio\" , \"rules\" : [ /* some match rules or constraint rules */ ], \"args\" : [ 2 , 3 ], } Test whether at least \\(\\frac{2}{3}\\) of rules in rules are satisfied. some \u00b6 Example { \"match\" : \"some\" , \"rules\" : [ /* some match rules or constraint rules */ ], \"args\" : [ 4 ], } Test whether at least 4 rules in rules are satisfied. Built-in Constraint s \u00b6 Tip: Directory Separator For path-related constraints, the directory separator is always / no matter what OS you are on. This should simplify the rule definitions. Tip: Inverted Result For all constraint rules, you may set inverted to true to invert the test result. { // This means testing the file does NOT contains `string_a` or `string_b`. \"constraint\" : \"contains\" , \"args\" : [ \"string_a\" , \"string_b\" ], \"inverted\" : true , } Warning Under certain circumstances, the test result will not be inverted. For example, if the is_size constraint tests a unsaved buffer, the result will always be false no matter inverted is true or false , because a unsaved buffer has no file size. contains \u00b6 Example { \"constraint\" : \"contains\" , \"args\" : [ \"string_a\" , \"string_b\" ], \"kwargs\" : { \"threshold\" : 2 }, } Test whether the file contains string literals string_a or string_b . At least 2 occurrences should be found. contains_regex \u00b6 Example { \"constraint\" : \"contains_regex\" , \"args\" : [ \"string_[ab]\" , \"^import\\\\s\" ], \"kwargs\" : { \"regex_flags\" : [ \"MULTILINE\" ], \"threshold\" : 2 , }, } Test whether the file contains regexes string_[ab] or ^import\\s . At least 2 occurrences should be found. first_line_contains \u00b6 Example { \"constraint\" : \"first_line_contains\" , \"args\" : [ \"string_a\" , \"string_b\" ], } Test whether the first line contains string literals string_a or string_b . first_line_contains_regex \u00b6 Example { \"constraint\" : \"first_line_contains_regex\" , \"args\" : [ \"string_[ab]\" , \"^import\\\\s\" ], \"kwargs\" : { \"regex_flags\" : [ \"MULTILINE\" ] }, } Test whether the first line contains regexes string_[ab] or ^import\\s . relative_exists \u00b6 Example { \"constraint\" : \"relative_exists\" , \"args\" : [ \"foo\" , \"bar/\" ], \"kwargs\" : { \"match\" : \"all\" }, } Test whether both file foo and directory bar/ exist relatively to the file. is_arch \u00b6 Example { \"constraint\" : \"is_arch\" , \"args\" : [ \"x32\" , \"arm64\" ], } Test whether the system arch is x32 or arm64 . Info Available platforms are: x32 , x64 , and arm64 . is_extension \u00b6 Example { \"constraint\" : \"is_extension\" , \"args\" : [ \".rb\" , \".rake\" ], \"kwargs\" : { \"case_insensitive\" : false }, } Test whether the file extension is .rb or .rake . Info If case_insensitive is not provided, it will be true on Windows but false on other OSes. is_guesslang_enabled \u00b6 Example { \"constraint\" : \"is_guesslang_enabled\" , } Test whether the guesslang server is enabled. is_hidden_syntax \u00b6 Example { \"constraint\" : \"is_hidden_syntax\" , } Test whether the current syntax is hidden. Info A hidden syntax is usually not for providing syntax highlighting. For example, the \"A File Icon\" plugin uses hidden syntaxes just to show dedicated icons. is_in_git_repo \u00b6 Example { \"constraint\" : \"is_in_git_repo\" , } Test whether the file is in a git repository. is_in_hg_repo \u00b6 Example { \"constraint\" : \"is_in_hg_repo\" , } Test whether the file is in a Mercurial repository. is_in_python_django_project \u00b6 Example { \"constraint\" : \"is_in_python_django_project\" , } Test whether the file is in a (Python) Django project. is_in_ruby_on_rails_project \u00b6 Example { \"constraint\" : \"is_in_ruby_on_rails_project\" , } Test whether the file is in a Ruby on Rails project. is_in_svn_repo \u00b6 Example { \"constraint\" : \"is_in_svn_repo\" , } Test whether the file is in a SVN repository. is_interpreter \u00b6 Example { \"constraint\" : \"is_interpreter\" , \"args\" : [ \"bash\" , \"zsh\" ], } Test any of the followings the interpreter in shebang the syntax in the VIM's syntax line is bash or zsh . is_line_count \u00b6 Example { \"constraint\" : \"is_line_count\" , \"args\" : [ \">\" , 500 ], } Test whether the file has more than 500 lines. Info Available comparators are: < , <= , == , >= , > and != . is_name \u00b6 Example { \"constraint\" : \"is_name\" , \"args\" : [ \"foo\" , \"bar\" ], \"kwargs\" : { \"case_insensitive\" : false }, } Test whether the file name is foo or bar . Info If case_insensitive is not provided, it will be true on Windows but false on other OSes. is_platform \u00b6 Example { \"constraint\" : \"is_platform\" , \"args\" : [ \"linux\" , \"windows\" ], } Test whether the system platform is Linux or Windows . Info Available platforms are: linux , osx , and windows . is_platform_arch \u00b6 Example { \"constraint\" : \"is_platform_arch\" , \"args\" : [ \"linux_x64\" , \"windows_x32\" , \"osx_arm64\" ], } Test whether the system platform and arch is Linux 64-bit , Windows 32-bit or Apple M1 . Info Available platform_arch are combinations of ( linux , osx , windows ) and ( x32 , x64 , arm64 ) using a _ as the delimiter. is_rails_file \u00b6 Example { \"constraint\" : \"is_rails_file\" , } Test whether the file is a Ruby on Rails file. is_size \u00b6 Example { \"constraint\" : \"is_size\" , \"args\" : [ \">\" , 5000 ], } Test whether the file size is greater than 5000 bytes (about 5 KB). Info Available comparators are: < , <= , == , >= , > and != . is_syntax \u00b6 Example { \"constraint\" : \"is_syntax\" , \"args\" : [ \"scope:source.python\" , \"JavaScript\" , \"/JSON.\" ] } Test whether the current syntax is in the given syntax list. See syntax representation for more informations. name_contains \u00b6 Example { \"constraint\" : \"name_contains\" , \"args\" : [ \"foo\" , \"bar\" ], } Test whether the file name contains foo or bar . name_contains_regex \u00b6 Example { \"constraint\" : \"name_contains_regex\" , \"args\" : [ \"^foo\" , \"bar$\" ], \"kwargs\" : { \"regex_flags\" : [ \"MULTILINE\" ] }, } Test whether the file name contains regexes ^foo or bar$ . path_contains \u00b6 Example { \"constraint\" : \"path_contains\" , \"args\" : [ \"foo\" , \"bar\" ], } Test whether the file path contains foo or bar . path_contains_regex \u00b6 Example { \"constraint\" : \"path_contains_regex\" , \"args\" : [ \"/conf/.*\\\\.conf$\" , \"/assets/.*\\\\.js$\" ], \"kwargs\" : { \"regex_flags\" : [ \"MULTILINE\" ] }, } Test whether the file path contains regexes /conf/.*\\.conf$ or /assets/.*\\.js$ . selector_matches \u00b6 Example { \"constraint\" : \"selector_matches\" , \"args\" : [ \"text.plain | source.env\" ], } Test whether the any of selectors matches the base scope of the current syntax. Regular Expression Flags \u00b6 Some constraint s allow you to use (Python) regexes in args . There are two ways to use regex flags on those regexes. Inline Regex Flags regex_flags in kwargs Example { \"constraint\" : \"contains_regex\" , \"args\" : [ \"(?i:foo)_bar\" ], } This will matches FoO_bar . Info If you want to learn more, you may read inline regex flags . By default, [ \"MULTILINE\" ] is used for convenience. Warning Note that those regex_flags will be applied to ALL regexes. Example { \"constraint\" : \"contains_regex\" , \"args\" : [ \"string_[ab]\" , \"^import\\\\s\" ], \"kwargs\" : { \"regex_flags\" : [ \"IGNORECASE\" , \"MULTILINE\" ] }, } This will make string_[ab] and ^import\\s matching case-insensitive. Common Flags Flag Meaning \"IGNORECASE\" Ignore case (case-insensitive). \"I\" An alias of \"IGNORECASE\" . \"MULTILINE\" Make ^ matches at line beginnings and $ matches at line endings. \"M\" An alias of \"MULTILINE\" . \"DOTALL\" Make . matches any character, including a newline. \"S\" An alias of \"DOTALL\" . If you want to learn more, you may read Python's docs about the re module .","title":"Configurations"},{"location":"configurations/#configurations","text":"","title":"Configurations"},{"location":"configurations/#settings","text":"Sometimes, a good way to learn about settings is reading an existing one. AutoSetSyntax.sublime-settings { ////////////////////////////////////////////////////////// // Online Documentations // // https://jfcherng-sublime.github.io/ST-AutoSetSyntax/ // ////////////////////////////////////////////////////////// /////////////////// // User Settings // /////////////////// // Enable plugin log (in a dedicated panel) \"enable_log\" : true , // Set default syntax for build outputs. // Can be one of following formats: // - Syntax top scope: \"scope:text.html.markdown\" // - Partial/full syntax file path: \"Markdown/Markdown.\" // - The name of the syntax: \"Markdown\" (which is shown in the bottom-right corner of ST) // - An empty string, which does nothing \"exec_file_syntax\" : \"Packages/AutoSetSyntax/syntaxes/ExecOutput.sublime-syntax\" , // Set default syntax for new files. You can use multiple formats as described above. \"new_file_syntax\" : \"\" , // Run \"auto_set_syntax\" command on views which exist before the plugin is loaded? \"run_on_startup_views\" : false , // The max lookup size for the file. // A negative number means no limit, which may have performance issue on large files. \"trim_file_size\" : 20000 , // about 20KB // The max lookup length for the first line. // A negative number means no limit, which may have performance issue on a long first line. \"trim_first_line_length\" : 500 , // Apart from \"trim_suffixes\", also try to remove every sub-extensions when finding a syntax match. \"trim_suffixes_auto\" : false , // Syntax rules that will be checked one by one. // This plugin will assign the syntax in the first satisfied rule to the view. // You may want to see \"default_syntax_rules\" for some examples. \"user_syntax_rules\" : [], // Suffixes that will be used to right trim the filename. // By doing that, the file may be then auto set syntax with a trimmed filename. \"user_trim_suffixes\" : [], ////////////////////// // Project Settings // //////////////////////////////////////////////////////////////////////////// // You shouldn't change these settings here but in your project settings. // //////////////////////////////////////////////////////////////////////////// // Syntax rules that will be checked one by one. // This plugin will assign the syntax in the first satisfied rule to the view. // You may want to see \"default_syntax_rules\" for some examples. \"project_syntax_rules\" : [], // Suffixes that will be used to right trim the filename. // By doing that, the file may be then auto set syntax with a trimmed filename. \"project_trim_suffixes\" : [], ////////////////////// // Default Settings // //////////////////////////////////////////////////////////////////////////// // If you override default rules, they will not be updated in the future. // // If you want to add new rules, add them in user settings. // //////////////////////////////////////////////////////////////////////////// // Syntax rules that will be checked one by one. // This plugin will assign the syntax in the first satisfied rule to the view. \"default_syntax_rules\" : [ // syntax rule { \"syntaxes\" : \"scope:source.python\" , \"selector\" : \"text.plain\" , // match rule \"match\" : \"all\" , // \"any\" by default \"rules\" : [ // constraint rule { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^(?:def|class)\\\\s\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^import(?!\\\\s+groovy)(?:$|[\\\\s(])\" , \"^from\\\\s+[a-zA-Z.]+\\\\s+import(?:$|[\\\\s(])\" ] } ] }, { \"comment\" : \"Basic INI files\" , \"syntaxes\" : \"scope:source.ini\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"is_name\" , \"args\" : [ \".minttyrc\" , \".wslconfig\" ] } ] }, { \"comment\" : \"Basic JSON files\" , \"syntaxes\" : \"scope:source.json\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"is_extension\" , \"args\" : [ \".css.map\" , \".geojson\" , \".js.map\" , \".jsonc\" , \".webmanifest\" ] }, { \"constraint\" : \"is_name\" , \"args\" : [ \".babelrc\" , \".bowerrc\" , \".csslintrc\" , \".eslintrc\" , \".jscsrc\" , \".jshintrc\" , \".markdownlintrc\" , \".stylelintrc\" ] } ] }, { \"comment\" : \"Basic YAML files\" , \"syntaxes\" : \"scope:source.yaml\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"is_name\" , \"args\" : [ \".clang-format\" , \".clang-tidy\" , \".clangd\" ] } ] }, { \"syntaxes\" : [ \"scope:source.shell.bash\" ], \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"is_name\" , \"args\" : [ \"profile\" , \".bash_history\" ] }, { \"constraint\" : \"name_contains_regex\" , \"args\" : [ \"\\\\.(?:bash|z(?:shrc|shenv|profile|login|logout))(?:\\\\.[^/]*)?$\" ] }, { \"constraint\" : \"first_line_contains_regex\" , \"args\" : [ // @see https://www.shellcheck.net/wiki/SC2148 \"^\\\\s*#\\\\s+shellcheck\\\\s+shell=(?:bash|zsh)\" ] } ] }, { \"comment\" : \"Linux .env files\" , \"syntaxes\" : [ \"/DotENV.\" , // https://packagecontrol.io/packages/DotENV \"scope:source.shell.bash\" ], \"selector\" : \"\" , \"match\" : \"all\" , \"rules\" : [ { \"rules\" : [ { \"constraint\" : \"selector_matches\" , \"args\" : [ \"text.plain\" ] }, { \"constraint\" : \"is_hidden_syntax\" } ] }, { \"rules\" : [ { \"constraint\" : \"is_name\" , \"args\" : [ \".envrc\" ] }, { \"constraint\" : \"name_contains_regex\" , \"args\" : [ \"\\\\.(?:env)(?:\\\\.[^/]*)?$\" ] } ] } ] }, { \"syntaxes\" : \"scope:text.git.config\" , \"selector\" : \"- text.git.config\" , \"rules\" : [ { \"constraint\" : \"path_contains_regex\" , \"args\" : [ \"^.*/.git/config$\" ] } ] }, { // at least, C++ is a super set of C in ST's syntax aspect \"syntaxes\" : \"scope:source.c++\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"contains_regex\" , \"args\" : [ \"(?:^|\\\\s)#include\\\\s*[<\\\"]\" , \"(?:^|\\\\s)#pragma\\\\s+(?:once|pack|(?:pop|push)_macro|warning)(?=$|\\\\s)\" , \"(?:^|\\\\s)template\\\\s*<\\\\s*(?:class|typename)(?=$|\\\\s)\" , // some strong characteristics of keywords \"\\\\b(?:const(?:eval|expr|init)|decltype|nullptr|(?:const|dynamic|reinterpret|static)_cast)(?=$|\\\\s)\" ] } ] }, { \"syntaxes\" : \"scope:source.cs\" , \"selector\" : \"text.plain\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^using\\\\s\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^namespace\\\\s\" ] } ] }, { \"syntaxes\" : \"scope:source.diff\" , \"selector\" : \"text.plain\" , \"rules\" : [ // path headers { \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^\\\\+{3} \" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^-{3} \" ] } ] }, // context line numbers { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^@@ -\\\\d+,\\\\d+ \\\\+\\\\d+,\\\\d+ @@\" ] } ] }, { \"syntaxes\" : \"scope:source.go\" , \"selector\" : \"text.plain\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^(?:package)\\\\s\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^(?:import|func|type)\\\\s\" ] } ] }, { \"syntaxes\" : [ \"Jenkinsfile\" , \"scope:source.groovy\" ], \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"name_contains_regex\" , \"args\" : [ \"^Jenkinsfile(?=\\\\b|_)\" ] } ] }, { \"syntaxes\" : \"scope:source.java\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"first_line_contains_regex\" , \"args\" : [ \"^\\\\s*import\\\\s+java\\\\.\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"\\\\bimport\\\\s+java\\\\.\" , \"\\\\bSystem\\\\.out\\\\.println\\\\s*\\\\(\" ], \"kwargs\" : { \"threshold\" : 2 } } ] }, { \"syntaxes\" : \"scope:source.js\" , \"selector\" : \"text.plain\" , \"match\" : \"all\" , \"rules\" : [ // the guesslang server does a better job at guessing JavaScript vs TypeScript { \"constraint\" : \"is_guesslang_enabled\" , \"inverted\" : true }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"\\\\bconsole\\\\.(?:assert|debug|error|info|log|trace|warn)\\\\s*\\\\(\" , \"(?:^|\\\\s)export\\\\s+default\\\\s\" ] } ] }, { \"syntaxes\" : \"scope:source.lua\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"is_name\" , \"args\" : [ \".conkyrc\" ] }, { \"constraint\" : \"is_interpreter\" , \"args\" : [ \"lua\" ] } ] }, { \"comment\" : \"Makefile\" , \"syntaxes\" : [ \"scope:source.makefile\" ], \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"name_contains_regex\" , \"args\" : [ \"^Makefile\\\\.\" ], \"kwargs\" : { \"regex_flags\" : [ \"IGNORECASE\" ] } } ] }, { // use the % regex to detect Matlab files \"syntaxes\" : \"scope:source.matlab\" , \"selector\" : \"text.plain | source.objc\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"is_extension\" , \"args\" : [ \".m\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^\\\\s*%\" ], \"kwargs\" : { \"threshold\" : 2 } } ] }, { // .m files could be Objective-C or Matlab files // We first use a rather reliable regex from GitHub // https://github.com/github/linguist/blob/master/lib/linguist/heuristics.rb#L69 // to apply syntax for Objective-C files \"syntaxes\" : \"scope:source.objc\" , \"selector\" : \"text.plain | source.matlab\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"is_extension\" , \"args\" : [ \".m\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^\\\\s*(?:@(?:interface|class|protocol|property|end|synchronised|selector|implementation)\\\\b|#import\\\\s+.+\\\\.h[\\\">])\" ] } ] }, { \"comment\" : \"\\\"Ruby on Rails\\\" project\" , \"syntaxes\" : \"scope:source.ruby.rails\" , \"selector\" : \"source.ruby\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"is_extension\" , \"args\" : [ \".rb\" , \".rake\" ] }, { \"constraint\" : \"is_in_ruby_on_rails_project\" } ] }, { \"syntaxes\" : \"scope:source.ruby\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"is_extension\" , \"args\" : [ \".simplecov\" ] }, { \"constraint\" : \"is_name\" , \"args\" : [ \"Cartfile\" , \"Cartfile.private\" , \"Cartfile.resolved\" , \"config.ru\" ], \"kwargs\" : { \"case_insensitive\" : true } }, { \"constraint\" : \"is_interpreter\" , \"args\" : [ \"ruby\" ] } ] }, { // Meteor templates follow Handlebars syntax, but must end in .html; // but they also always begin with `<template name=` \"syntaxes\" : \"scope:text.html.handlebars\" , \"selector\" : \"text.plain | text.html\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"is_extension\" , \"args\" : [ \".html\" ] }, { \"constraint\" : \"first_line_contains_regex\" , \"args\" : [ \"^<template name=\" ] } ] }, { \"comment\" : \"Django templates\" , \"syntaxes\" : [ \"scope:text.jinja\" , \"scope:text.html.jinja\" ], \"selector\" : \"text.html.basic\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"path_contains\" , \"args\" : [ \"/templates/\" ] }, { \"constraint\" : \"is_in_python_django_project\" } ] }, { \"comment\" : \"Jinja2/Twig HTML files\" , \"syntaxes\" : [ \"scope:text.jinja\" , \"scope:text.html.jinja\" , \"scope:text.html.twig\" ], \"selector\" : \"text.html.basic\" , \"rules\" : [ { \"constraint\" : \"contains_regex\" , \"args\" : [ \"{{\" , // https://jinja.palletsprojects.com/en/latest/templates/ \"{%\\\\s*(?:autoescape|call|elif|else|extends|filter|for|from|if|import|include|macro|set|trans|with)\\\\b\" ], \"kwargs\" : { \"threshold\" : 4 } } ] }, { \"syntaxes\" : \"scope:source.sql\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"first_line_contains\" , \"args\" : [ \"-- phpMyAdmin SQL Dump\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"\\\\bCREATE\\\\s+TABLE\\\\s+IF\\\\s+NOT\\\\s+EXISTS\\\\b\" ], \"kwargs\" : { \"regex_flags\" : [ \"MULTILINE\" , \"IGNORECASE\" ] } } ] }, { \"syntaxes\" : \"scope:source.typoscript\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"is_name\" , \"args\" : [ \"ext_conf_template.txt\" , \"ext_typoscript_constants.txt\" , \"ext_typoscript_setup.txt\" ] }, { \"constraint\" : \"path_contains_regex\" , \"args\" : [ \"^.*/(?:fileadmin|typo3|TypoScript).*/(?:setup|constants)\\\\.txt$\" ] } ] }, { \"comment\" : \"Apache config\" , \"syntaxes\" : \"scope:source.apacheconf\" , \"selector\" : \"text.plain | source.nginx\" , \"rules\" : [ { \"constraint\" : \"path_contains_regex\" , \"args\" : [ \"\\\\b(?i:apache|httpd)\\\\b.*/conf/.*\\\\.conf$\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"<(?:VirtualHost|Directory|Macro)(?:$|\\\\s)\" ] } ] }, { \"comment\" : \"NGINX config\" , \"syntaxes\" : \"scope:source.nginx\" , \"selector\" : \"text.plain | source.apacheconf\" , \"rules\" : [ { \"constraint\" : \"path_contains_regex\" , \"args\" : [ \"\\\\b(?i:nginx)\\\\b.*/conf/.*\\\\.conf$\" ] }, { \"constraint\" : \"contains_regex\" , \"args\" : [ \"^\\\\s*(?:location\\\\s+(?:[~=/a-zA-Z])|(?:fastcgi_param|charset_map)\\\\s)\" ] } ] }, { // @see https://doc.qt.io/qt-5/qt-conf.html \"comment\" : \"Qt's config file\" , \"syntaxes\" : \"scope:source.ini\" , \"selector\" : \"- source.ini\" , \"rules\" : [ { \"constraint\" : \"is_name\" , \"args\" : [ \"qt.conf\" ] } ] }, { // @see https://doc.qt.io/qtvstools/qtvstools-translation-files.html \"comment\" : \"Qt's translation file\" , \"syntaxes\" : \"scope:text.xml\" , \"selector\" : \"source.ts\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"is_extension\" , \"args\" : [ \".ts\" ] }, { \"constraint\" : \"first_line_contains_regex\" , \"args\" : [ \"^\\\\s*<\\\\?xml(?:$|\\\\s)\" ] } ] }, { \"comment\" : \"Sublime Text/Merge changelog\" , \"syntaxes\" : \"scope:text.html.basic\" , \"selector\" : \"text.plain\" , \"match\" : \"all\" , \"rules\" : [ { \"constraint\" : \"is_name\" , \"args\" : [ \"changelog.txt\" ] }, { \"constraint\" : \"relative_exists\" , \"args\" : [ \"sublime_text\" , \"sublime_text.exe\" , \"sublime_merge\" , \"sublime_merge.exe\" ] } ] }, { \"comment\" : \"Package Control: Package installation/update messages\" , \"syntaxes\" : \"scope:text.html.markdown\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"first_line_contains_regex\" , \"args\" : [ \"^Package Control Messages(?:$|\\\\s)\" ] } ] } ], // Suffixes that will be used to right trim the filename. // By doing that, the file may be then auto set syntax with a trimmed filename. \"default_trim_suffixes\" : [ \"-dev\" , \"-development\" , \"-dist\" , \"-optional\" , \"-prod\" , \"-production\" , \"-test\" , \".backup\" , \".bak\" , \".default\" , \".dev\" , \".dist\" , \".example\" , \".in\" , \".inc\" , \".include\" , \".local\" , \".orig\" , \".out\" , \".sample\" , \".shared\" , \".temp\" , \".test\" , \".tmp\" , \".tpl\" ], /////////////////// // Core Settings // ////////////////////////////////////////////////////////////////////////////////// // These settings make this plugin function normally. You shouldn't touch them. // ////////////////////////////////////////////////////////////////////////////////// \"core_syntax_rules\" : [ { \"comment\" : \"AutoSetSyntax Debug Information\" , \"syntaxes\" : \"scope:source.python\" , \"selector\" : \"text.plain\" , \"rules\" : [ { \"constraint\" : \"first_line_contains_regex\" , \"args\" : [ \"^# === AutoSetSyntax Debug Information === #\" ] } ] } ], /////////////////////////////////////// // Guesslang settings (experimental) // ///////////////////////////////////////////////////////////////////////// // You have to restart ST after modifying any of guesslang's settings. // ///////////////////////////////////////////////////////////////////////// // To use this feature, you have to install the server. // @see https://jfcherng-sublime.github.io/ST-AutoSetSyntax/experimental/ml-based-syntax-detection/#prerequisites \"guesslang.enabled\" : false , // The path of the node/node.exe executable. // You can use \"${lsp_utils_node_bin}\" if your Node.js is installed by lsp_utils \"guesslang.node_bin\" : \"node\" , \"guesslang.port\" : 15151 , \"guesslang.confidence_threshold\" : 0.15 , \"guesslang.syntax_map\" : { \"asm\" : [ // no good way to do this? \"scope:source.asm.x86_64\" , \"scope:source.asm.arm\" , \"scope:source.rvasm\" , \"scope:source.assembly\" ], \"bat\" : [ \"scope:source.dosbatch\" ], \"c\" : [ \"scope:source.c\" ], \"cbl\" : [ \"scope:source.cobol\" ], \"clj\" : [ \"scope:source.clojure\" ], \"cmake\" : [ \"scope:source.cmake\" ], \"coffee\" : [ \"scope:source.coffee\" ], \"cpp\" : [ \"scope:source.c++\" ], \"cs\" : [ \"scope:source.cs\" ], \"css\" : [ // SCSS is a superset and this server can't distinguish SCSS and CSS \"scope:source.scss\" , \"scope:source.css\" ], \"csv\" : [ \"scope:text.advanced_csv\" , \"scope:text.csv\" ], \"dart\" : [ \"scope:source.dart\" ], \"dm\" : [ \"scope:source.dm\" ], \"dockerfile\" : [ \"scope:source.dockerfile\" ], \"erl\" : [ \"scope:source.erlang\" ], \"ex\" : [ \"scope:source.elixir\" ], \"f90\" : [ \"scope:source.modern-fortran\" ], \"go\" : [ \"scope:source.go\" ], \"groovy\" : [ \"scope:source.groovy\" ], \"hs\" : [ \"scope:source.haskell\" ], \"html\" : [ \"scope:text.html.basic\" ], \"ini\" : [ \"scope:source.ini\" ], \"java\" : [ \"scope:source.java\" ], \"jl\" : [ \"scope:source.julia\" ], \"js\" : [ \"scope:source.js\" ], \"json\" : [ \"scope:source.json\" ], \"kt\" : [ \"scope:source.Kotlin\" ], \"lisp\" : [ \"scope:source.lisp\" ], \"lua\" : [ \"scope:source.lua\" ], \"makefile\" : [ \"scope:source.makefile\" ], \"matlab\" : [ \"scope:source.matlab\" ], \"md\" : [ \"scope:text.html.markdown\" ], \"ml\" : [], // what is this? \"mm\" : [ \"objective-c\" ], \"pas\" : [ \"scope:source.pascal\" ], \"php\" : [ \"scope:embedding.php\" , \"scope:text.html.php\" ], \"pl\" : [ \"scope:source.perl\" ], \"pm\" : [], // what is this? \"prolog\" : [ \"scope:source.prolog\" ], \"ps1\" : [ \"scope:source.powershell\" ], \"py\" : [ \"scope:source.python\" ], \"r\" : [ \"scope:source.r\" ], \"rb\" : [ \"scope:source.ruby\" ], \"rs\" : [ \"scope:source.rust\" ], \"scala\" : [ \"scope:source.scala\" ], \"sh\" : [ \"scope:source.shell.bash\" ], \"sql\" : [ \"scope:source.sql\" ], \"swift\" : [ \"scope:source.swift\" ], \"tex\" : [ \"scope:text.tex.latex\" ], \"toml\" : [ \"scope:source.toml\" ], \"ts\" : [ \"scope:source.ts\" ], \"v\" : [ \"scope:source.verilog\" ], \"vba\" : [ \"scope:source.vbs\" ], \"xml\" : [ \"scope:text.xml\" ], \"yml\" : [ \"scope:source.yaml\" ], // extra from vscode-regexp-languagedetection (modelLangToVSCodeLang) \"coffeescript\" : [ \"=coffee\" ], \"csharp\" : [ \"=cs\" ], \"erlang\" : [ \"=erl\" ], \"haskell\" : [ \"=hs\" ], \"javascript\" : [ \"=js\" ], \"markdown\" : [ \"=md\" ], \"objective-c\" : [ \"=mm\" ], \"perl\" : [ \"=pl\" ], \"powershell\" : [ \"=ps1\" ], \"python\" : [ \"=py\" ], \"ruby\" : [ \"=rb\" ], \"rust\" : [ \"=rs\" ], \"shellscript\" : [ \"=sh\" ], \"typescript\" : [ \"=ts\" ], \"yaml\" : [ \"=yml\" ] } }","title":"Settings"},{"location":"configurations/#enable_log","text":"Type Default boolean true This setting control whether this plugin creates a dedicated log message panel. Since the panel won't affect other plugins, the default value is true .","title":"enable_log"},{"location":"configurations/#exec_file_syntax","text":"Type Default string \"Packages/AutoSetSyntax/syntaxes/ExecOutput.sublime-syntax\" This setting controls what syntax a build output should use. The value can be any of the followings: An empty string, which does nothing. A syntax representation .","title":"exec_file_syntax"},{"location":"configurations/#new_file_syntax","text":"Type Default string \"\" This setting controls what syntax a new file should use. The value can be any of the followings: An empty string, which does nothing. A syntax representation .","title":"new_file_syntax"},{"location":"configurations/#run_on_startup_views","text":"Type Default boolean false This setting controls whether you want to run the auto_set_syntax command on views which exist before the plugin is loaded. If ST starts from cold start, this settings is necessary to set syntax for the just opened file. Info When ST starts up, there may be views that exists before plugins are loaded. Those views won't trigger on_load or on_load_async event listener in plugins. But those views will be put as an argument for the on_init event. For some people, they may even have hundreds of tabs opened. They may not want a plugin to run on all those views when ST starts up.","title":"run_on_startup_views"},{"location":"configurations/#trim_file_size","text":"Type Default integer 20000 (about 20KB) Detecting the syntax for the whole file can be resource-consuming if the file is large. This setting approximately controls how many bytes should be used to represent a file.","title":"trim_file_size"},{"location":"configurations/#trim_first_line_length","text":"Type Default integer 500 Detecting the syntax for the whole first line can be resource-consuming if it's a super long one-line file. This setting controls how many characters should be used to represent the first line.","title":"trim_first_line_length"},{"location":"configurations/#trim_suffixes_auto","text":"Type Default boolean false Apart from trim_suffixes , also try to remove every sub-extensions when finding a syntax match. For example, for the file foo.json.ext1.ext2.ext3 , this setting enables trying the following file names as well. foo.json.ext1.ext2 (no matching syntax) foo.json.ext1 (no matching syntax) foo.json (matches JSON syntax) If there is no JSON syntax, then foo will be tried.","title":"trim_suffixes_auto"},{"location":"configurations/#default_syntax_rules","text":"Syntax rules are the key part of AutoSetSyntax. Structure of syntax rules \"default_syntax_rules\" : [ // syntax rule { \"comment\" : \"...\" , \"syntaxes\" : \"...\" , \"selector\" : \"...\" , \"on_events\" : null , // match rule \"match\" : \"...\" , \"rules\" : [ // constraint rule { \"constraint\" : \"...\" , \"args\" : [ \"...\" ], }, // match rule { \"match\" : \"...\" , \"rules\" : [ // can be recursive... ], }, ], }, // more syntax rules... ], Syntax rule Match rule Constraint rule A syntax rule contains comment , syntaxes , selector , on_events and an expanded top-level match rule . Arguments comment syntaxes selector on_events This is just a optional string which explains what this syntax rule is for. It may make your debugging easier. syntaxes is a list of syntax representation . If there is only one syntax, you can simply un-list it into a string. If the top-level match is satisfied by rules , the first usable syntax in syntaxes will be assigned to the view. Limit this syntax rule only works when the selector matches the top scope. Learn more about selectors from ST official docs . on_events is a list of event names or (by default) null . It's used to restrict this syntax rule only works if this run is triggered by some certain events. If it's null , then there is no restriction. Failure If you use an empty list, then this syntax rule will never be evaluated. Available Events Event Name Meaning \"command\" This run is triggered by the auto_set_syntax command. \"init\" This run is triggered by startup views. \"load\" This run is triggered because a file gets loaded. \"modify\" This run is triggered because of a buffer modification. \"new\" This run is triggered because of a newly created window. \"reload\" This run is triggered because a file has been reloaded. \"revert\" This run is triggered because of the revert command. \"save\" This run is triggered because of the buffer gets saved. \"untransientize\" This run is triggered because a transient view becomes a normal view. A match rule may recursively contain any amount of match rule and constraint rule so you can build complex rules basing on your needs. Arguments The default value of the match is \"any\" , which tests whether there is any rules satisfied. Tip You may learn more about built-in match es here . A constraint rule is the lowest-level rule, which tests an actual constraint. Tip You may learn more about built-in constraint s here . Warning It's not recommended to directly override default_syntax_rules because that stops you from possible future updates for default_syntax_rules . The recommended way is putting your syntax rules in user_syntax_rules . And put project-specific syntax rules in project_syntax_rules in project settings .","title":"default_syntax_rules"},{"location":"configurations/#default_trim_suffixes","text":"Type Default string[] [ \".dist\" , \".local\" , /* many other suffixes */ ] These suffixes are considered unimportant in a file name. AutoSetSyntax will try to remove them from the file name and maybe a syntax will be found for a trimmed file name. Warning It's not recommended to directly override default_trim_suffixes because that stops you from possible future updates for default_trim_suffixes . The recommended way is putting your suffixes in user_trim_suffixes . And put project-specific suffixes in project_trim_suffixes in project settings .","title":"default_trim_suffixes"},{"location":"configurations/#terms-and-explanations","text":"","title":"Terms and Explanations"},{"location":"configurations/#syntax-representations","text":"When we talk about setting \"syntax\" in plugin settings, there are three ways you can use. Example Let's take the built-in JavaScript syntax as an example. By scope By name By path Summary You can use \"scope:TOP_SCOPE\" to represents a syntax. For example, the top scope of JavaScript is source.js . Thus, you can use \"scope:source.js\" . Tip To show the scope at the caret position, press Ctrl + Alt + Shift + P . You can use the syntax name to represent a syntax. For example, it's JavaScript for the JavaScript syntax. Thus, you can use \"JavaScript\" . Info The syntax name is shown in the bottom-right corner of ST . Warning If you manually type a syntax name, note that it's case-sensitive. You can use a partial path (or a full one if you prefer) of a syntax to represent it. For example, the full path for the JavaScript syntax is Packages/JavaScript/JavaScript.sublime-syntax . Theoretically, you may use any substring of the full path to represent it. But if your partial path is not unique, it may represent other syntaxes as well and causes unwanted behavior. Thus, if you want to go the \"by path\" way, I recommend using \"/JavaScript/JavaScript.\" . All of followings represent the same syntax, JavaScript . Top scope: \"scope:source.js\" Name: \"JavaScript\" Partial path: \"/JavaScript/JavaScript.\" Full path: \"Packages/JavaScript/JavaScript.sublime-syntax\"","title":"Syntax Representations"},{"location":"configurations/#project-settings","text":"To edit project settings, go to Project \u00bb Edit Project . Example { \"folders\" : [ // ... ], \"settings\" : { \"AutoSetSyntax\" : { // use JavaScript as the new file syntax \"new_file_syntax\" : \"scope:source.js\" , \"project_syntax_rules\" : [ // specific rules only for this project ], \"project_trim_suffixes\" : [ // specific trimmed suffixes only for this project ], // maybe other plugin settings... }, }, } You can override any plugin setting in project settings. But most likely, you are just interested in new_file_syntax , project_syntax_rules and probably project_trim_suffixes .","title":"Project Settings"},{"location":"configurations/#appendix","text":"","title":"Appendix"},{"location":"configurations/#built-in-matches","text":"","title":"Built-in Matches"},{"location":"configurations/#all","text":"Example { \"match\" : \"all\" , \"rules\" : [ /* some match rules or constraint rules */ ], } Test whether all rules in rules are satisfied.","title":"all"},{"location":"configurations/#any","text":"Example { \"match\" : \"any\" , \"rules\" : [ /* some match rules or constraint rules */ ], } Test whether there is any rule in rules satisfied.","title":"any"},{"location":"configurations/#ratio","text":"Example { \"match\" : \"ratio\" , \"rules\" : [ /* some match rules or constraint rules */ ], \"args\" : [ 2 , 3 ], } Test whether at least \\(\\frac{2}{3}\\) of rules in rules are satisfied.","title":"ratio"},{"location":"configurations/#some","text":"Example { \"match\" : \"some\" , \"rules\" : [ /* some match rules or constraint rules */ ], \"args\" : [ 4 ], } Test whether at least 4 rules in rules are satisfied.","title":"some"},{"location":"configurations/#built-in-constraints","text":"Tip: Directory Separator For path-related constraints, the directory separator is always / no matter what OS you are on. This should simplify the rule definitions. Tip: Inverted Result For all constraint rules, you may set inverted to true to invert the test result. { // This means testing the file does NOT contains `string_a` or `string_b`. \"constraint\" : \"contains\" , \"args\" : [ \"string_a\" , \"string_b\" ], \"inverted\" : true , } Warning Under certain circumstances, the test result will not be inverted. For example, if the is_size constraint tests a unsaved buffer, the result will always be false no matter inverted is true or false , because a unsaved buffer has no file size.","title":"Built-in Constraints"},{"location":"configurations/#contains","text":"Example { \"constraint\" : \"contains\" , \"args\" : [ \"string_a\" , \"string_b\" ], \"kwargs\" : { \"threshold\" : 2 }, } Test whether the file contains string literals string_a or string_b . At least 2 occurrences should be found.","title":"contains"},{"location":"configurations/#contains_regex","text":"Example { \"constraint\" : \"contains_regex\" , \"args\" : [ \"string_[ab]\" , \"^import\\\\s\" ], \"kwargs\" : { \"regex_flags\" : [ \"MULTILINE\" ], \"threshold\" : 2 , }, } Test whether the file contains regexes string_[ab] or ^import\\s . At least 2 occurrences should be found.","title":"contains_regex"},{"location":"configurations/#first_line_contains","text":"Example { \"constraint\" : \"first_line_contains\" , \"args\" : [ \"string_a\" , \"string_b\" ], } Test whether the first line contains string literals string_a or string_b .","title":"first_line_contains"},{"location":"configurations/#first_line_contains_regex","text":"Example { \"constraint\" : \"first_line_contains_regex\" , \"args\" : [ \"string_[ab]\" , \"^import\\\\s\" ], \"kwargs\" : { \"regex_flags\" : [ \"MULTILINE\" ] }, } Test whether the first line contains regexes string_[ab] or ^import\\s .","title":"first_line_contains_regex"},{"location":"configurations/#relative_exists","text":"Example { \"constraint\" : \"relative_exists\" , \"args\" : [ \"foo\" , \"bar/\" ], \"kwargs\" : { \"match\" : \"all\" }, } Test whether both file foo and directory bar/ exist relatively to the file.","title":"relative_exists"},{"location":"configurations/#is_arch","text":"Example { \"constraint\" : \"is_arch\" , \"args\" : [ \"x32\" , \"arm64\" ], } Test whether the system arch is x32 or arm64 . Info Available platforms are: x32 , x64 , and arm64 .","title":"is_arch"},{"location":"configurations/#is_extension","text":"Example { \"constraint\" : \"is_extension\" , \"args\" : [ \".rb\" , \".rake\" ], \"kwargs\" : { \"case_insensitive\" : false }, } Test whether the file extension is .rb or .rake . Info If case_insensitive is not provided, it will be true on Windows but false on other OSes.","title":"is_extension"},{"location":"configurations/#is_guesslang_enabled","text":"Example { \"constraint\" : \"is_guesslang_enabled\" , } Test whether the guesslang server is enabled.","title":"is_guesslang_enabled"},{"location":"configurations/#is_hidden_syntax","text":"Example { \"constraint\" : \"is_hidden_syntax\" , } Test whether the current syntax is hidden. Info A hidden syntax is usually not for providing syntax highlighting. For example, the \"A File Icon\" plugin uses hidden syntaxes just to show dedicated icons.","title":"is_hidden_syntax"},{"location":"configurations/#is_in_git_repo","text":"Example { \"constraint\" : \"is_in_git_repo\" , } Test whether the file is in a git repository.","title":"is_in_git_repo"},{"location":"configurations/#is_in_hg_repo","text":"Example { \"constraint\" : \"is_in_hg_repo\" , } Test whether the file is in a Mercurial repository.","title":"is_in_hg_repo"},{"location":"configurations/#is_in_python_django_project","text":"Example { \"constraint\" : \"is_in_python_django_project\" , } Test whether the file is in a (Python) Django project.","title":"is_in_python_django_project"},{"location":"configurations/#is_in_ruby_on_rails_project","text":"Example { \"constraint\" : \"is_in_ruby_on_rails_project\" , } Test whether the file is in a Ruby on Rails project.","title":"is_in_ruby_on_rails_project"},{"location":"configurations/#is_in_svn_repo","text":"Example { \"constraint\" : \"is_in_svn_repo\" , } Test whether the file is in a SVN repository.","title":"is_in_svn_repo"},{"location":"configurations/#is_interpreter","text":"Example { \"constraint\" : \"is_interpreter\" , \"args\" : [ \"bash\" , \"zsh\" ], } Test any of the followings the interpreter in shebang the syntax in the VIM's syntax line is bash or zsh .","title":"is_interpreter"},{"location":"configurations/#is_line_count","text":"Example { \"constraint\" : \"is_line_count\" , \"args\" : [ \">\" , 500 ], } Test whether the file has more than 500 lines. Info Available comparators are: < , <= , == , >= , > and != .","title":"is_line_count"},{"location":"configurations/#is_name","text":"Example { \"constraint\" : \"is_name\" , \"args\" : [ \"foo\" , \"bar\" ], \"kwargs\" : { \"case_insensitive\" : false }, } Test whether the file name is foo or bar . Info If case_insensitive is not provided, it will be true on Windows but false on other OSes.","title":"is_name"},{"location":"configurations/#is_platform","text":"Example { \"constraint\" : \"is_platform\" , \"args\" : [ \"linux\" , \"windows\" ], } Test whether the system platform is Linux or Windows . Info Available platforms are: linux , osx , and windows .","title":"is_platform"},{"location":"configurations/#is_platform_arch","text":"Example { \"constraint\" : \"is_platform_arch\" , \"args\" : [ \"linux_x64\" , \"windows_x32\" , \"osx_arm64\" ], } Test whether the system platform and arch is Linux 64-bit , Windows 32-bit or Apple M1 . Info Available platform_arch are combinations of ( linux , osx , windows ) and ( x32 , x64 , arm64 ) using a _ as the delimiter.","title":"is_platform_arch"},{"location":"configurations/#is_rails_file","text":"Example { \"constraint\" : \"is_rails_file\" , } Test whether the file is a Ruby on Rails file.","title":"is_rails_file"},{"location":"configurations/#is_size","text":"Example { \"constraint\" : \"is_size\" , \"args\" : [ \">\" , 5000 ], } Test whether the file size is greater than 5000 bytes (about 5 KB). Info Available comparators are: < , <= , == , >= , > and != .","title":"is_size"},{"location":"configurations/#is_syntax","text":"Example { \"constraint\" : \"is_syntax\" , \"args\" : [ \"scope:source.python\" , \"JavaScript\" , \"/JSON.\" ] } Test whether the current syntax is in the given syntax list. See syntax representation for more informations.","title":"is_syntax"},{"location":"configurations/#name_contains","text":"Example { \"constraint\" : \"name_contains\" , \"args\" : [ \"foo\" , \"bar\" ], } Test whether the file name contains foo or bar .","title":"name_contains"},{"location":"configurations/#name_contains_regex","text":"Example { \"constraint\" : \"name_contains_regex\" , \"args\" : [ \"^foo\" , \"bar$\" ], \"kwargs\" : { \"regex_flags\" : [ \"MULTILINE\" ] }, } Test whether the file name contains regexes ^foo or bar$ .","title":"name_contains_regex"},{"location":"configurations/#path_contains","text":"Example { \"constraint\" : \"path_contains\" , \"args\" : [ \"foo\" , \"bar\" ], } Test whether the file path contains foo or bar .","title":"path_contains"},{"location":"configurations/#path_contains_regex","text":"Example { \"constraint\" : \"path_contains_regex\" , \"args\" : [ \"/conf/.*\\\\.conf$\" , \"/assets/.*\\\\.js$\" ], \"kwargs\" : { \"regex_flags\" : [ \"MULTILINE\" ] }, } Test whether the file path contains regexes /conf/.*\\.conf$ or /assets/.*\\.js$ .","title":"path_contains_regex"},{"location":"configurations/#selector_matches","text":"Example { \"constraint\" : \"selector_matches\" , \"args\" : [ \"text.plain | source.env\" ], } Test whether the any of selectors matches the base scope of the current syntax.","title":"selector_matches"},{"location":"configurations/#regular-expression-flags","text":"Some constraint s allow you to use (Python) regexes in args . There are two ways to use regex flags on those regexes. Inline Regex Flags regex_flags in kwargs Example { \"constraint\" : \"contains_regex\" , \"args\" : [ \"(?i:foo)_bar\" ], } This will matches FoO_bar . Info If you want to learn more, you may read inline regex flags . By default, [ \"MULTILINE\" ] is used for convenience. Warning Note that those regex_flags will be applied to ALL regexes. Example { \"constraint\" : \"contains_regex\" , \"args\" : [ \"string_[ab]\" , \"^import\\\\s\" ], \"kwargs\" : { \"regex_flags\" : [ \"IGNORECASE\" , \"MULTILINE\" ] }, } This will make string_[ab] and ^import\\s matching case-insensitive. Common Flags Flag Meaning \"IGNORECASE\" Ignore case (case-insensitive). \"I\" An alias of \"IGNORECASE\" . \"MULTILINE\" Make ^ matches at line beginnings and $ matches at line endings. \"M\" An alias of \"MULTILINE\" . \"DOTALL\" Make . matches any character, including a newline. \"S\" An alias of \"DOTALL\" . If you want to learn more, you may read Python's docs about the re module .","title":"Regular Expression Flags"},{"location":"debug/","text":"Log Panel \u00b6 Log messages are printed in the dedicated log panel. There are two ways to open the log panel: Right click on the bottom-left corner of ST and then select Output: AutoSetSyntax . Or, run AutoSetSyntax: Show Log Panel from the command palette 1 . (Re-)save your plugin/project settings. See whether your rules are in those dropped rules. In that case, it's likely that your rules have wrong name or args. Note Each window has its own log panel. They may have different outputs due to project settings. Debug Information \u00b6 Run AutoSetSyntax: Debug Information from the command palette 1 . The debug information will be copied to the clipboard. Tip The debug information is designed to be Python-compatible, thus you can format it with a Python formatter like Black . Command palette: Ctrl + P for Windows/Linux. Cmd + P for macOS. \u21a9 \u21a9","title":"Debug"},{"location":"debug/#log-panel","text":"Log messages are printed in the dedicated log panel. There are two ways to open the log panel: Right click on the bottom-left corner of ST and then select Output: AutoSetSyntax . Or, run AutoSetSyntax: Show Log Panel from the command palette 1 . (Re-)save your plugin/project settings. See whether your rules are in those dropped rules. In that case, it's likely that your rules have wrong name or args. Note Each window has its own log panel. They may have different outputs due to project settings.","title":"Log Panel"},{"location":"debug/#debug-information","text":"Run AutoSetSyntax: Debug Information from the command palette 1 . The debug information will be copied to the clipboard. Tip The debug information is designed to be Python-compatible, thus you can format it with a Python formatter like Black . Command palette: Ctrl + P for Windows/Linux. Cmd + P for macOS. \u21a9 \u21a9","title":"Debug Information"},{"location":"use-cases/","text":"Use Cases \u00b6 Default syntax for new files \u00b6 Sometimes, mostly in a project, you just want to have this functionality. For example, you may want a new file 1 to be auto set to JavaScript , React or Vue syntax in a frontend web project. Info Check the new_file_syntax plugin setting. Detecting the syntax when modifying the file \u00b6 This method works only under following circumstances: The view's syntax is currently Plain Text . And the user is modifying either the first line or the last few chars of the file. A typical use case is that if you create a new file and type <?php , the file will automatically be set to PHP syntax because the PHP syntax claims it handles files whose first line is <?php . Tip This also works with user-defined rule so when you copy and paste codes from a random website into ST , your defined rule may help you set the syntax too, because you are very likely modifying either the first line or the last few characters. Trimming unimportant suffixes from the filename \u00b6 When a file is loaded, this plugin deduces the syntax for your \" Plain Text \" file by its filename. For example, you may have a configuration file whose name is parameters.yml.dist . ST can't find a syntax for a .dist extension so your parameters.yml.dist remains Plain Text . However, this plugin will try to remove unimportant suffixes from the filename. By default, .dist is in the trim_suffixes list, so this plugin will remove it and try whether it can find a syntax for parameters.yml , and yes, it deserves the YAML syntax. Info Check default_trim_suffixes , user_trim_suffixes and project_trim_suffixes plugin settings. Assigning syntax for Sublime Text syntax test files \u00b6 Sometimes, the syntax test file just has no file extension so a syntax won't be assigned by Sublime Text. For example, for the built-in Git Config.sublime-syntax , its test file is named as syntax_test_git_config . When you open it, AutoSetSyntax sets the syntax basing on its first line: # SYNTAX TEST \"Git Config.sublime-syntax\" . Assigning syntax by the first line \u00b6 If a file whose name has no . and its first line satisfies any of following conditions, Has a shebang. Has a VIM's syntax line. this plugin prefers the syntax set by it whenever possible. This means to fix some corner cases such as a file whose name is cs but has a Python shebang. It will be set to C# by ST due to its filename, but the shebang should be precise. We don't want to overkill that setting a .erb ( HTML (Rails) ) template file back to HTML syntax due to its first line. Info ST prefers assigning the syntax basing on the file name (extension) than the first line. If the file name is exactly an extension of a syntax, for example, the file name is js , ST will use that syntax (which can be wrong). This is how ST detects files who have no extension like Makefile . User-defined rules \u00b6 For average users, read \" Configurations \" for more details to create your own rules. For advanced users, you may read \"Advanced Topics\" for creating custom Match or Constraint implementations. Machine learning based syntax detection \u00b6 This can be useful for files which have no extension or irregular extensions, or when pasting codes into a new buffer. Check ML-based Detection . Dim out build status from the build output panel \u00b6 There is a bundled syntax , which dims out unimportant information such as [Finished in 89ms] . When AutoSetSyntax detects there is a build running, it sets the syntax of the output panel to the bundled one unless the output panel has its own syntax already. Hopefully, this makes the output less distractive. If you want to customize the color of unimportant information, their scopes are comment.status.autosetsyntax.exec . Create a new file: Ctrl + N for Windows/Linux. Cmd + N for macOS. \u21a9","title":"Use Cases"},{"location":"use-cases/#use-cases","text":"","title":"Use Cases"},{"location":"use-cases/#default-syntax-for-new-files","text":"Sometimes, mostly in a project, you just want to have this functionality. For example, you may want a new file 1 to be auto set to JavaScript , React or Vue syntax in a frontend web project. Info Check the new_file_syntax plugin setting.","title":"Default syntax for new files"},{"location":"use-cases/#detecting-the-syntax-when-modifying-the-file","text":"This method works only under following circumstances: The view's syntax is currently Plain Text . And the user is modifying either the first line or the last few chars of the file. A typical use case is that if you create a new file and type <?php , the file will automatically be set to PHP syntax because the PHP syntax claims it handles files whose first line is <?php . Tip This also works with user-defined rule so when you copy and paste codes from a random website into ST , your defined rule may help you set the syntax too, because you are very likely modifying either the first line or the last few characters.","title":"Detecting the syntax when modifying the file"},{"location":"use-cases/#trimming-unimportant-suffixes-from-the-filename","text":"When a file is loaded, this plugin deduces the syntax for your \" Plain Text \" file by its filename. For example, you may have a configuration file whose name is parameters.yml.dist . ST can't find a syntax for a .dist extension so your parameters.yml.dist remains Plain Text . However, this plugin will try to remove unimportant suffixes from the filename. By default, .dist is in the trim_suffixes list, so this plugin will remove it and try whether it can find a syntax for parameters.yml , and yes, it deserves the YAML syntax. Info Check default_trim_suffixes , user_trim_suffixes and project_trim_suffixes plugin settings.","title":"Trimming unimportant suffixes from the filename"},{"location":"use-cases/#assigning-syntax-for-sublime-text-syntax-test-files","text":"Sometimes, the syntax test file just has no file extension so a syntax won't be assigned by Sublime Text. For example, for the built-in Git Config.sublime-syntax , its test file is named as syntax_test_git_config . When you open it, AutoSetSyntax sets the syntax basing on its first line: # SYNTAX TEST \"Git Config.sublime-syntax\" .","title":"Assigning syntax for Sublime Text syntax test files"},{"location":"use-cases/#assigning-syntax-by-the-first-line","text":"If a file whose name has no . and its first line satisfies any of following conditions, Has a shebang. Has a VIM's syntax line. this plugin prefers the syntax set by it whenever possible. This means to fix some corner cases such as a file whose name is cs but has a Python shebang. It will be set to C# by ST due to its filename, but the shebang should be precise. We don't want to overkill that setting a .erb ( HTML (Rails) ) template file back to HTML syntax due to its first line. Info ST prefers assigning the syntax basing on the file name (extension) than the first line. If the file name is exactly an extension of a syntax, for example, the file name is js , ST will use that syntax (which can be wrong). This is how ST detects files who have no extension like Makefile .","title":"Assigning syntax by the first line"},{"location":"use-cases/#user-defined-rules","text":"For average users, read \" Configurations \" for more details to create your own rules. For advanced users, you may read \"Advanced Topics\" for creating custom Match or Constraint implementations.","title":"User-defined rules"},{"location":"use-cases/#machine-learning-based-syntax-detection","text":"This can be useful for files which have no extension or irregular extensions, or when pasting codes into a new buffer. Check ML-based Detection .","title":"Machine learning based syntax detection"},{"location":"use-cases/#dim-out-build-status-from-the-build-output-panel","text":"There is a bundled syntax , which dims out unimportant information such as [Finished in 89ms] . When AutoSetSyntax detects there is a build running, it sets the syntax of the output panel to the bundled one unless the output panel has its own syntax already. Hopefully, this makes the output less distractive. If you want to customize the color of unimportant information, their scopes are comment.status.autosetsyntax.exec . Create a new file: Ctrl + N for Windows/Linux. Cmd + N for macOS. \u21a9","title":"Dim out build status from the build output panel"},{"location":"advanced-topics/custom-constraint/","text":"Custom Constraint Implementation \u00b6 Tip You may check how built-in Constraint s are implemented here . You may create your own custom Constraint implementation by following steps. Run AutoSetSyntax: Create New Constraint from the command palette 1 . It will create a template like Example from typing import final import sublime from AutoSetSyntax.plugin import AbstractConstraint @final class MyOwnConstraint ( AbstractConstraint ): \"\"\"Your custom `Constraint` must inherit `AbstractConstraint` and implement the `test` method.\"\"\" def is_droppable ( self ) -> bool : # Optionally, you can implement `is_droppable` to indicate that this object # can be dropped under certain circumstances by the optimizer. return False def test ( self , view : sublime . View ) -> bool : # Your job is to implement this function, at least. # This function tests the `view`. # There is a @staticmethod which returns cached contexts for using. # def get_view_snapshot(view: sublime.View) -> ViewSnapshot: ... return False Tip There is a get_view_snapshot method, which accepts an sublime.View as an argument and returns a ViewSnapshot object. In the object, there are some cached information about the current view to provide a uniform format and prevent from calling resource-consuming function calls several times among rules. @dataclass class ViewSnapshot : id : int \"\"\"View ID.\"\"\" char_count : int \"\"\"Character count.\"\"\" content : str \"\"\"Pseudo file content.\"\"\" file_name : str \"\"\"The file name. Empty string if not on a disk.\"\"\" file_name_unhidden : str \"\"\"The file name without prefixed dots. Empty string if not on a disk.\"\"\" file_path : str \"\"\"The full file path with `/` as the directory separator. Empty string if not on a disk.\"\"\" file_size : int \"\"\"In bytes, -1 if file not on a disk.\"\"\" first_line : str \"\"\"Pseudo first line.\"\"\" line_count : int \"\"\"Number of lines in the original content.\"\"\" syntax : Optional [ sublime . Syntax ] \"\"\"The syntax object. Note that the value is as-is when it's cached.\"\"\" Decide the constraint name of your Constraint . Say, if your class name is MyOwnConstraint , the constraint name is decided by Remove Constraint suffix from the class name. ( MyOwnConstraint \u00bb MyOwn ) Convert it into snake case. ( MyOwn \u00bb my_own ) That is, you can use it via \"constraint\": \"my_own\" in a constraint rule. At least, implement the test method. Save your implementation in Packages/AutoSetSyntax-Custom/constraints/ . Conventionally, the file name used is the constraint name, my_own.py . Restart ST and check whether your implementation is loaded via Debug Information . Command palette: Ctrl + P for Windows/Linux. Cmd + P for macOS. \u21a9","title":"Custom Constraint"},{"location":"advanced-topics/custom-constraint/#custom-constraint-implementation","text":"Tip You may check how built-in Constraint s are implemented here . You may create your own custom Constraint implementation by following steps. Run AutoSetSyntax: Create New Constraint from the command palette 1 . It will create a template like Example from typing import final import sublime from AutoSetSyntax.plugin import AbstractConstraint @final class MyOwnConstraint ( AbstractConstraint ): \"\"\"Your custom `Constraint` must inherit `AbstractConstraint` and implement the `test` method.\"\"\" def is_droppable ( self ) -> bool : # Optionally, you can implement `is_droppable` to indicate that this object # can be dropped under certain circumstances by the optimizer. return False def test ( self , view : sublime . View ) -> bool : # Your job is to implement this function, at least. # This function tests the `view`. # There is a @staticmethod which returns cached contexts for using. # def get_view_snapshot(view: sublime.View) -> ViewSnapshot: ... return False Tip There is a get_view_snapshot method, which accepts an sublime.View as an argument and returns a ViewSnapshot object. In the object, there are some cached information about the current view to provide a uniform format and prevent from calling resource-consuming function calls several times among rules. @dataclass class ViewSnapshot : id : int \"\"\"View ID.\"\"\" char_count : int \"\"\"Character count.\"\"\" content : str \"\"\"Pseudo file content.\"\"\" file_name : str \"\"\"The file name. Empty string if not on a disk.\"\"\" file_name_unhidden : str \"\"\"The file name without prefixed dots. Empty string if not on a disk.\"\"\" file_path : str \"\"\"The full file path with `/` as the directory separator. Empty string if not on a disk.\"\"\" file_size : int \"\"\"In bytes, -1 if file not on a disk.\"\"\" first_line : str \"\"\"Pseudo first line.\"\"\" line_count : int \"\"\"Number of lines in the original content.\"\"\" syntax : Optional [ sublime . Syntax ] \"\"\"The syntax object. Note that the value is as-is when it's cached.\"\"\" Decide the constraint name of your Constraint . Say, if your class name is MyOwnConstraint , the constraint name is decided by Remove Constraint suffix from the class name. ( MyOwnConstraint \u00bb MyOwn ) Convert it into snake case. ( MyOwn \u00bb my_own ) That is, you can use it via \"constraint\": \"my_own\" in a constraint rule. At least, implement the test method. Save your implementation in Packages/AutoSetSyntax-Custom/constraints/ . Conventionally, the file name used is the constraint name, my_own.py . Restart ST and check whether your implementation is loaded via Debug Information . Command palette: Ctrl + P for Windows/Linux. Cmd + P for macOS. \u21a9","title":"Custom Constraint Implementation"},{"location":"advanced-topics/custom-match/","text":"Custom Match Implementation \u00b6 Tip You may check how built-in Match es are implemented here . You may create your own custom Match implementation by following steps. Run AutoSetSyntax: Create New Match from the command palette 1 . It will create a template like Example from typing import Tuple , final import sublime from AutoSetSyntax.plugin import AbstractMatch , MatchableRule @final class MyOwnMatch ( AbstractMatch ): \"\"\"Your custom `Match` must inherit `AbstractMatch` and implement the `test` method.\"\"\" def is_droppable ( self , rules : Tuple [ MatchableRule , ... ]) -> bool : # Optionally, you can implement `is_droppable` to indicate that this object # can be dropped under certain circumstances by the optimizer. return False def test ( self , view : sublime . View , rules : Tuple [ MatchableRule , ... ]) -> bool : # Your job is to implement this function, at least. # This function tests `rules` (mix of `ConstraintRule`s and `MatchRule`s). return False Decide the match name of your Match . Say, if your class name is MyOwnMatch , the match name is decided by Remove Match suffix from the class name. ( MyOwnMatch \u00bb MyOwn ) Convert it into snake case. ( MyOwn \u00bb my_own ) That is, you can use it via \"match\": \"my_own\" in a match rule. At least, implement the test method. Save your implementation in Packages/AutoSetSyntax-Custom/matches/ . Conventionally, the file name used is the match name, my_own.py . Restart ST and check whether your implementation is loaded via Debug Information . Command palette: Ctrl + P for Windows/Linux. Cmd + P for macOS. \u21a9","title":"Custom Match"},{"location":"advanced-topics/custom-match/#custom-match-implementation","text":"Tip You may check how built-in Match es are implemented here . You may create your own custom Match implementation by following steps. Run AutoSetSyntax: Create New Match from the command palette 1 . It will create a template like Example from typing import Tuple , final import sublime from AutoSetSyntax.plugin import AbstractMatch , MatchableRule @final class MyOwnMatch ( AbstractMatch ): \"\"\"Your custom `Match` must inherit `AbstractMatch` and implement the `test` method.\"\"\" def is_droppable ( self , rules : Tuple [ MatchableRule , ... ]) -> bool : # Optionally, you can implement `is_droppable` to indicate that this object # can be dropped under certain circumstances by the optimizer. return False def test ( self , view : sublime . View , rules : Tuple [ MatchableRule , ... ]) -> bool : # Your job is to implement this function, at least. # This function tests `rules` (mix of `ConstraintRule`s and `MatchRule`s). return False Decide the match name of your Match . Say, if your class name is MyOwnMatch , the match name is decided by Remove Match suffix from the class name. ( MyOwnMatch \u00bb MyOwn ) Convert it into snake case. ( MyOwn \u00bb my_own ) That is, you can use it via \"match\": \"my_own\" in a match rule. At least, implement the test method. Save your implementation in Packages/AutoSetSyntax-Custom/matches/ . Conventionally, the file name used is the match name, my_own.py . Restart ST and check whether your implementation is loaded via Debug Information . Command palette: Ctrl + P for Windows/Linux. Cmd + P for macOS. \u21a9","title":"Custom Match Implementation"},{"location":"advanced-topics/how-plugin-works/","text":"How Plugin Works \u00b6 When AutoSetSyntax is loaded or plugin/project settings updated, AutoSetSyntax runs following procedures. Generate merged settings. Find Match / Constraint implementations. Compile merged settings into rule objects. Optimize compiled rule objects. AutoSetSyntax has some event listeners (see listener.py ) which tests syntax rules by calling SyntaxRuleCollection.test(...) under certain circumstances. Before SyntaxRuleCollection.test(...) runs, ViewSnapshot takes a snapshot of the view and that snapshot will be used in this whole run to prevent from calling expensive APIs among syntax rules. When SyntaxRuleCollection.test(...) runs, syntax rules in it are tested in the order as they are defined in settings. If there is a syntax rule matches, the test ends and the syntax of the view will be set to the one defined in the syntax rule. Merge Settings \u00b6 Merged settings are per-window. They are generated by merging plugin settings with project settings. If the user updates plugin settings, merged settings for all existing windows should be re-generated. If the user updates project settings, only settings of the corresponding project window needs to be re-generated. Info Settings precedence: Project settings > User settings > Default settings Find Implementations \u00b6 Built-in implementations are hard-coded. (see plugin/rules/constraints/__init__.py ) Custom implementations are loaded from specific folders if any. (see _load_custom_implementations() ) Rule Compilation \u00b6 This step compiles merged settings into a SyntaxRuleCollection object. All necessary objects are created in this step (and re-used in the future) rather than when rules are tested every time. Rule Optimization \u00b6 This step optimizes the compiled SyntaxRuleCollection object by calling its optimize method. Currently, it drops invalid rules (like object with invalid args) and unreachable rules. is_droppable functions in Match es and Constraint s are evaluated to decide whether it can be dropped or not.","title":"How Plugin Works"},{"location":"advanced-topics/how-plugin-works/#how-plugin-works","text":"When AutoSetSyntax is loaded or plugin/project settings updated, AutoSetSyntax runs following procedures. Generate merged settings. Find Match / Constraint implementations. Compile merged settings into rule objects. Optimize compiled rule objects. AutoSetSyntax has some event listeners (see listener.py ) which tests syntax rules by calling SyntaxRuleCollection.test(...) under certain circumstances. Before SyntaxRuleCollection.test(...) runs, ViewSnapshot takes a snapshot of the view and that snapshot will be used in this whole run to prevent from calling expensive APIs among syntax rules. When SyntaxRuleCollection.test(...) runs, syntax rules in it are tested in the order as they are defined in settings. If there is a syntax rule matches, the test ends and the syntax of the view will be set to the one defined in the syntax rule.","title":"How Plugin Works"},{"location":"advanced-topics/how-plugin-works/#merge-settings","text":"Merged settings are per-window. They are generated by merging plugin settings with project settings. If the user updates plugin settings, merged settings for all existing windows should be re-generated. If the user updates project settings, only settings of the corresponding project window needs to be re-generated. Info Settings precedence: Project settings > User settings > Default settings","title":"Merge Settings"},{"location":"advanced-topics/how-plugin-works/#find-implementations","text":"Built-in implementations are hard-coded. (see plugin/rules/constraints/__init__.py ) Custom implementations are loaded from specific folders if any. (see _load_custom_implementations() )","title":"Find Implementations"},{"location":"advanced-topics/how-plugin-works/#rule-compilation","text":"This step compiles merged settings into a SyntaxRuleCollection object. All necessary objects are created in this step (and re-used in the future) rather than when rules are tested every time.","title":"Rule Compilation"},{"location":"advanced-topics/how-plugin-works/#rule-optimization","text":"This step optimizes the compiled SyntaxRuleCollection object by calling its optimize method. Currently, it drops invalid rules (like object with invalid args) and unreachable rules. is_droppable functions in Match es and Constraint s are evaluated to decide whether it can be dropped or not.","title":"Rule Optimization"},{"location":"experimental/ml-based-syntax-detection/","text":"Machine Learning Based Syntax Detection \u00b6 This feature is experimental and disabled by default. Overview \u00b6 It uses machine learning models from VSCode to predict the syntax of codes. Prerequisites \u00b6 Node.js \u2265 16 If the directory of your node executable is in the PATH environment variable, then you don't have to configure it. If your Node runtime is provided by lsp_utils , then you can config \"guesslang.node_bin\" to \"${lsp_utils_node_bin}\" . If you are none of the above cases, you have to provide the path of your node executable in \"guesslang.node_bin\" . Windows 7 Users The official Node.js v16 installer won't work on Windows 7 but you can simply download a portable version such as node-v16.17.1-win-x64.zip , decompress it and set the guesslang.node_bin path. Install the server. Run AutoSetSyntax: Download Guesslang Server from the command palette. It will popup a dialogue when it's done. Enable the feature. Set \"guesslang.enabled\" to true in AutoSetSyntax's settings. After you've done all steps above and then restart ST , it should work after a few seconds. Demo \u00b6 Your browser does not support the video element.","title":"Machine Learning Based Syntax Detection"},{"location":"experimental/ml-based-syntax-detection/#machine-learning-based-syntax-detection","text":"This feature is experimental and disabled by default.","title":"Machine Learning Based Syntax Detection"},{"location":"experimental/ml-based-syntax-detection/#overview","text":"It uses machine learning models from VSCode to predict the syntax of codes.","title":"Overview"},{"location":"experimental/ml-based-syntax-detection/#prerequisites","text":"Node.js \u2265 16 If the directory of your node executable is in the PATH environment variable, then you don't have to configure it. If your Node runtime is provided by lsp_utils , then you can config \"guesslang.node_bin\" to \"${lsp_utils_node_bin}\" . If you are none of the above cases, you have to provide the path of your node executable in \"guesslang.node_bin\" . Windows 7 Users The official Node.js v16 installer won't work on Windows 7 but you can simply download a portable version such as node-v16.17.1-win-x64.zip , decompress it and set the guesslang.node_bin path. Install the server. Run AutoSetSyntax: Download Guesslang Server from the command palette. It will popup a dialogue when it's done. Enable the feature. Set \"guesslang.enabled\" to true in AutoSetSyntax's settings. After you've done all steps above and then restart ST , it should work after a few seconds.","title":"Prerequisites"},{"location":"experimental/ml-based-syntax-detection/#demo","text":"Your browser does not support the video element.","title":"Demo"}]}